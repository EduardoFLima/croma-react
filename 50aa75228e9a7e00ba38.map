{"version":3,"sources":["/home/runner/work/croma-react/croma-react/components/Card.js","/home/runner/work/croma-react/croma-react/components/MultiColorView.js","/home/runner/work/croma-react/croma-react/components/EmptyView.js","/home/runner/work/croma-react/croma-react/screens/HomeScreen.js","/home/runner/work/croma-react/croma-react/components/PaletteCard.js","/home/runner/work/croma-react/croma-react/libs/ColorPicker.js","/home/runner/work/croma-react/croma-react/components/ColorDetails.js","/home/runner/work/croma-react/croma-react/components/CromaButton.js","/home/runner/work/croma-react/croma-react/screens/ColorDetailScreen.js","/home/runner/work/croma-react/croma-react/screens/ColorPickerScreen.js","/home/runner/work/croma-react/croma-react/components/PalettePreviewCard.js","/home/runner/work/croma-react/croma-react/screens/PalettesScreen.js","/home/runner/work/croma-react/croma-react/components/SavePalette.js","/home/runner/work/croma-react/croma-react/components/SingleColorView.js","/home/runner/work/croma-react/croma-react/screens/ColorListScreen.js","/home/runner/work/croma-react/croma-react/components/SingleColorCard.js","/home/runner/work/croma-react/croma-react/screens/PaletteScreen.js","/home/runner/work/croma-react/croma-react/navigation/MainTabNavigator.js","/home/runner/work/croma-react/croma-react/screens/SavePaletteScreen.js","/home/runner/work/croma-react/croma-react/screens/AddPaletteManuallyScreen.js","/home/runner/work/croma-react/croma-react/navigation/AppNavigator.web.js","/home/runner/work/croma-react/croma-react/components/ErrorBoundary.js","/home/runner/work/croma-react/croma-react/App.js","/home/runner/work/croma-react/croma-react/web-build/register-service-worker.js","/home/runner/work/croma-react/croma-react/constants/Colors.js","/home/runner/work/croma-react/croma-react/libs/Storage.js","/home/runner/work/croma-react/croma-react/store/store.js","/home/runner/work/croma-react/croma-react/components/CommanDialogs.js"],"names":["Card","Platform","OS","onClick","this","props","onPress","style","styles","inner","View","children","React","StyleSheet","create","backgroundColor","Colors","white","marginVertical","elevation","MultiColorView","palette","alignItems","flexDirection","height","color","flex","colors","map","item","key","EmptyView","HomeScreen","Dimensions","get","width","useContext","Croma","isLoading","allPalettes","deletedPalettes","undoDeletionByName","isPro","setPurchase","useState","pickImgloading","setPickImgLoading","useEffect","a","async","Constants","platform","ios","Permissions","status","alert","getPermissionAsync","Linking","getInitialURL","then","url","result","split","forEach","part","decodeURIComponent","navigation","navigate","Set","JSON","parse","name","container","minHeight","Header","HEIGHT","showsVerticalScrollIndicator","Object","keys","slice","length","bgColor","hideShadow","buttonColor","accent","offsetY","className","actionButtonWeb","Item","title","ImagePicker","mediaTypes","All","quality","base64","undefined","Jimp","read","Buffer","uri","pickImage","image","err","ColorPicker","getProminentColors","catch","ToastAndroid","show","LONG","actionButtonIcon","onDone","primary","openURL","InAppBilling","open","purchase","details","close","navigationOptions","margin","justifyContent","fontSize","position","transform","right","left","PaletteCard","shared","setShared","deletePaletteByName","bottom","label","actionButtonsView","top","padding","textAlign","borderRadius","event","preventDefault","stopPropagation","Clipboard","setString","colorObj","join","encodeURIComponent","stringify","setTimeout","actionButton","size","Share","share","message","action","sharedAction","activityType","dismissedAction","marginHorizontal","darkGrey","resize","AUTO","data","_prepareDataForKmeans","ans","Date","now","kmeans","initialization","maxIterations","centroids","sort","c1","c2","kmeansColors","centroid","Color","_labToHex","_getFinalColors","c","tohex","_toArray","tohsv","filteredColors","i","colorList","j","push","finalColors","lab","bitmap","intColor","getPixelColor","hex","_toHexColor","xyz","tolab","substr","v","parseFloat","rgba","intToRGBA","r","g","b","index","indexOf","ColorDetail","copyiedIndex","setCopyiedIntex","alignSelf","info","colorNameText","fontWeight","items","value","torgb","tohsl","tohwb","tocmyk","luminance","toFixed","darkness","debouncedSetCopiedIndex","func","delay","debounceTimer","context","args","arguments","clearTimeout","apply","debounce","marginTop","writeToClipboard","Text","FontAwesome","CromaButton","button","text","shadowColor","shadowOffset","shadowOpacity","shadowRadius","marginBottom","textTransform","ColorDetailScreen","getParam","ScrollView","paddingLeft","paddingRight","PalettePreviewCard","PalettesScreen","test","toString","replace","str","toUpperCase","SavePalette","paletteName","setPaletteName","setFinalColors","isUnlockProNotification","setIsUnlockProNotifiction","isPaletteNameExist","setIsPaletteNameExist","addPalette","colorsFromParams","navigationPath","card","TextInput","input","placeholder","onChangeText","borderBottomColor","borderBottomWidth","SingleColorView","colorText","ColorListScreen","set","uniqueColors","has","add","listview","SingleColorCard","colorDeleteFromPalette","PaletteScreen","undoColorDeletion","addColorToPalette","deletedColors","deleteColor","ActionButton","colorName","RootStack","select","web","headerMode","default","createStackNavigator","ColorDetails","ColorDetailsScreen","setColor","onChangeColor","goBack","Palettes","ColorList","Palette","Home","AddPaletteManually","initialRouteName","transparentCard","defaultNavigationOptions","headerStyle","headerRight","Entypo","marginRight","headerTintColor","createAppContainer","switchNavigator","createSwitchNavigator","Main","MainTabNavigator","path","createBrowserApp","history","ErrorBoundary","state","hasError","error","window","location","setState","Component","App","isPalettesLoaded","setIsPalettesLoaded","applicationState","applicationHook","initState","loadInitPaletteFromStore","platfrom","Provider","StatusBar","barStyle","hidden","primaryDark","translucent","networkActivityIndicatorVisible","maxWidth","ActivityIndicator","animating","navigator","addEventListener","serviceWorker","register","scope","console","tintColor","tabIconDefault","tabIconSelected","tabBar","errorBackground","errorText","warningBackground","warningText","noticeBackground","noticeText","grey","lightGrey","black","fadedBlack","Storage","getApplicationState","AsyncStorage","getItem","setApplicationState","setItem","setUserAlreadyExists","checkUserAlreadyExists","sortPalette","removePaletteFromStateByName","clearDeletedColor","splice","_state","colorIndex","deletedColor","concat","purchaseDetails","syncStateToStore","createContext","DialogContainer","UndoDialog","undoCard","undoText","undoButton","TextDialog"],"mappings":"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","file":"static/js/app.6a60a1fb.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { StyleSheet, Animated, Platform } from \"react-native\";\nimport Colors from \"../constants/Colors\";\nimport Touchable from \"react-native-platform-touchable\";\n\nexport default class Card extends React.Component {\n  render() {\n    return (\n      <Touchable\n        {...(Platform.OS === \"web\"\n          ? {\n              // When scrolling the document body, the touchables might be triggered\n              // see  https://github.com/necolas/react-native-web/issues/1219\n              onClick: this.props.onPress\n            }\n          : {\n              onPress: this.props.onPress\n            })}\n        style={[styles.inner]}\n      >\n        <Animated.View {...this.props}>{this.props.children}</Animated.View>\n      </Touchable>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  inner: {\n    backgroundColor: Colors.white,\n    marginVertical: 8,\n    elevation: 1\n  }\n});\n","import * as React from \"react\";\nimport { StyleSheet, View, Text } from \"react-native\";\nexport default function MultiColorView(props) {\n  const styles = StyleSheet.create({\n    palette: {\n      alignItems: \"stretch\",\n      flexDirection: \"row\",\n      height: 112\n    },\n    color: {\n      flex: 1\n    }\n  });\n  return (\n    <View style={styles.palette}>\n      {props.colors &&\n        props.colors.map(item => (\n          <View\n            style={[styles.color, { backgroundColor: item.color }]}\n            key={item.color}\n          />\n        ))}\n    </View>\n  );\n}\n","import * as React from \"react\";\nimport { View } from \"react-native\";\n\nconst EmptyView = () => <View style={{ height: 100 }}></View>;\n\nexport default EmptyView;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  ScrollView,\n  StyleSheet,\n  ActivityIndicator,\n  View,\n  Dimensions,\n  Platform,\n  Linking,\n  ToastAndroid\n} from \"react-native\";\nimport { PaletteCard } from \"../components/PaletteCard\";\nimport { UndoDialog, DialogContainer } from \"../components/CommanDialogs\";\nimport { Croma } from \"../store/store\";\nimport Colors from \"../constants/Colors\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport Constants from \"expo-constants\";\nimport * as Permissions from \"expo-permissions\";\nimport ColorPicker from \"../libs/ColorPicker\";\nimport Jimp from \"jimp\";\nimport { Header } from \"react-navigation\";\nimport EmptyView from \"../components/EmptyView\";\nimport ActionButton from \"react-native-action-button\";\nimport { Ionicons, Entypo } from \"@expo/vector-icons\";\nimport InAppBilling from \"react-native-billing\";\n\nconst HomeScreen = function (props) {\n  const { height, width } = Dimensions.get(\"window\");\n\n  const {\n    isLoading,\n    allPalettes,\n    deletedPalettes,\n    undoDeletionByName,\n    isPro,\n    setPurchase\n  } = React.useContext(Croma);\n  const [pickImgloading, setPickImgLoading] = useState(false);\n\n  const pickImage = async () => {\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      quality: 1,\n      base64: true\n    });\n    if (result.base64 !== undefined) {\n      return await Jimp.read(new Buffer(result.base64, \"base64\"));\n    } else {\n      return await Jimp.read(result.uri);\n    }\n  };\n  const getPermissionAsync = async () => {\n    if (Constants.platform.ios) {\n      const { status } = await Permissions.askAsync(Permissions.CAMERA_ROLL);\n      if (status !== \"granted\") {\n        alert(\"Sorry, we need camera roll permissions to make this work!\");\n      }\n    }\n  };\n  const purchase = async function () {\n    try {\n      await InAppBilling.open();\n      const details = await InAppBilling.purchase(\"croma_pro\");\n      ToastAndroid.show(\"Congrats, You are now a pro user!\", ToastAndroid.LONG);\n      setPurchase(details);\n    } catch (err) {\n      ToastAndroid.show(\"Purchase unsucceessful \" + err, ToastAndroid.LONG);\n    } finally {\n      await InAppBilling.close();\n    }\n  };\n  // TODO: restore purchase\n  const checkPurchase = async function () {\n    try {\n      await InAppBilling.open();\n      // If subscriptions/products are updated server-side you\n      // will have to update cache with loadOwnedPurchasesFromGoogle()\n      await InAppBilling.loadOwnedPurchasesFromGoogle();\n      const isPurchased = await InAppBilling.isPurchased(\"croma_pro\");\n    } catch (err) {\n    } finally {\n      await InAppBilling.close();\n    }\n  };\n  useEffect(() => {\n    getPermissionAsync();\n    if (Platform.OS === 'android') {\n      // Deep linking code \n      // https://medium.com/react-native-training/deep-linking-your-react-native-app-d87c39a1ad5e\n      Linking.getInitialURL().then(url => {\n        if (url) {\n          const result = {};\n          url.split(\"?\")[1].split(\"&\").forEach(function(part) {\n            var item = part.split(\"=\");\n            result[item[0]] = decodeURIComponent(item[1]);\n          });\n          props.navigation.navigate('SavePalette',{ colors: [...new Set(JSON.parse(result['colors']) || [])],name: result['name']});\n        }\n      });\n    }\n  }, []);\n  if (isLoading) {\n    return <ActivityIndicator />;\n  } else {\n    return (\n      <>\n        <View\n          style={[styles.container, { minHeight: height - Header.HEIGHT - 16 }]}\n        >\n          {pickImgloading ? <ActivityIndicator /> : <View />}\n          <ScrollView showsVerticalScrollIndicator={false}>\n            {Object.keys(allPalettes).map(name => {\n              return (\n                <PaletteCard\n                  key={name}\n                  colors={allPalettes[name].colors.slice(\n                    0,\n                    isPro ? allPalettes[name].colors.length : 4\n                  )}\n                  name={name}\n                  navigation={props.navigation}\n                />\n              );\n            })}\n            <EmptyView />\n          </ScrollView>\n        </View>\n\n        <DialogContainer>\n          {Object.keys(deletedPalettes).map(name => {\n            return (\n              <UndoDialog\n                key={name}\n                name={name}\n                undoDeletionByName={undoDeletionByName}\n              />\n            );\n          })}\n        </DialogContainer>\n        {/*Setting box shadow to false because of Issue on the web: https://github.com/mastermoo/react-native-action-button/issues/337 */}\n        \n        <ActionButton\n          bgColor=\"rgba(68, 68, 68, 0.6)\"\n          hideShadow={Platform.OS === \"web\" ? true : false}\n          buttonColor={Colors.accent}\n          offsetY={60}\n          className={'testitman'}\n          key=\"action-button-home\"\n          style={Platform.OS === 'web' ? styles.actionButtonWeb : {}}\n        >\n          <ActionButton.Item\n            buttonColor=\"#9b59b6\"\n            title=\"Get palette from image\"\n            onPress={() => {\n              setPickImgLoading(true);\n              pickImage()\n                .then((image, err) => {\n                  setPickImgLoading(false);\n                  props.navigation.navigate(\"ColorList\", {\n                    colors: ColorPicker.getProminentColors(image)\n                  });\n                })\n                .catch(err => {\n                  if (Platform.OS == 'android') {\n                    ToastAndroid.show(\"Error while processing image: \" + err, ToastAndroid.LONG);\n                  }\n                  setPickImgLoading(false);\n                });\n            }}\n          >\n            <Ionicons name=\"md-camera\" style={styles.actionButtonIcon} />\n          </ActionButton.Item>\n          <ActionButton.Item\n            buttonColor=\"#3498db\"\n            title=\"Get palette from color\"\n            onPress={() => {\n              props.navigation.navigate(\"ColorPicker\", {\n                onDone: color => {\n                  props.navigation.navigate(\"Palettes\", {\n                    color: color.color\n                  });\n                }\n              });\n            }}\n          >\n            <Ionicons name=\"md-color-palette\" style={styles.actionButtonIcon} />\n          </ActionButton.Item>\n          <ActionButton.Item\n            buttonColor=\"#1abc9c\"\n            title=\"Add colors manually\"\n            onPress={() => props.navigation.navigate(\"AddPaletteManually\")}\n          >\n            <Ionicons name=\"md-color-filter\" style={styles.actionButtonIcon} />\n          </ActionButton.Item>\n          {Platform.OS === \"web\" && (\n            <ActionButton.Item\n              buttonColor={Colors.primary}\n              title=\"Get croma on playstore\"\n              onPress={() =>\n                Linking.openURL(\n                  \"https://play.google.com/store/apps/details?id=app.croma\"\n                )\n              }\n            >\n              <Entypo name=\"google-play\" style={styles.actionButtonIcon} />\n            </ActionButton.Item>\n          )}\n          {Platform.OS === \"android\" && !isPro && (\n            <ActionButton.Item\n              buttonColor={Colors.primary}\n              title=\"Unlock pro\"\n              onPress={() => {\n                purchase();\n              }}\n            >\n              <Ionicons name=\"md-unlock\" style={styles.actionButtonIcon} />\n            </ActionButton.Item>\n          )}\n        </ActionButton>\n      </>\n    );\n  }\n};\n\nexport default HomeScreen;\n\nHomeScreen.navigationOptions = {\n  title: \"Croma\"\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    margin: 8,\n    justifyContent: \"center\"\n  },\n  actionButtonIcon: {\n    fontSize: 20,\n    height: 22,\n    color: \"white\"\n  },\n  actionButtonWeb: {\n    position: 'fixed',\n    transform: 'scale(1) rotate(0deg) !important', \n    right: (Dimensions.get(\"window\").width - 600) / 2,\n    left: (Dimensions.get(\"window\").width - 600) / 2\n  }\n});\n","import * as React from \"react\";\nimport { StyleSheet, View, Text, Platform, Clipboard } from \"react-native\";\nimport Card from \"./Card\";\nimport Colors from \"../constants/Colors\";\nimport { Share } from \"react-native\";\n\nimport MultiColorView from \"./MultiColorView\";\nimport { FontAwesome } from \"@expo/vector-icons\";\nimport Touchable from \"react-native-platform-touchable\";\nimport { Croma } from \"../store/store\";\n\nexport const PaletteCard = props => {\n  const [shared, setShared] = React.useState(false);\n  const { deletePaletteByName } = React.useContext(Croma);\n  const onShare = async () => {\n    try {\n      const result = await Share.share(\n        {\n          message: `Croma - Palette Manager\\nColors:\\n${props.colors.map((colorObj) => colorObj.color).join('\\n')}\n      \n          https://croma.app/#/Main/SavePalette?name=${\n          encodeURIComponent(props.name)\n          }&colors=${encodeURIComponent(JSON.stringify(props.colors))}`\n        }\n      );\n\n      if (result.action === Share.sharedAction) {\n        if (result.activityType) {\n          // shared with activity type of result.activityType\n        } else {\n          // shared\n        }\n      } else if (result.action === Share.dismissedAction) {\n        // dismissed\n      }\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  const onShareWeb = event => {\n    event.preventDefault();\n    event.stopPropagation();\n    Clipboard.setString(\n      `Croma - Palette Manager\\nColors:\\n${props.colors.map((colorObj) => colorObj.color).join('\\n')}\n      \n      https://croma.app/#/Main/SavePalette?name=${\n      encodeURIComponent(props.name)\n      }&colors=${encodeURIComponent(JSON.stringify(props.colors))}`\n    );\n    setShared(true);\n    setTimeout(() => {\n      setShared(false);\n    }, 3000);\n  };\n  return (\n    <Card\n      {...props}\n      onPress={() => {\n        props.navigation.navigate(\"Palette\", props);\n      }}\n    >\n      <MultiColorView {...props}></MultiColorView>\n\n      <View style={styles.bottom}>\n        <Text style={styles.label}>{props.name}</Text>\n        <View style={styles.actionButtonsView}>\n          {shared && (\n            <Text\n              style={{\n                position: \"absolute\",\n                backgroundColor: \"rgb(64, 64, 58)\",\n                top: \"-35px\",\n                right: \"-10px\",\n                width: \"148px\",\n                color: \"#fff\",\n                padding: \"5px \",\n                textAlign: \"center\",\n                borderRadius: \"6px\"\n              }}\n            >\n              Copied to Clipboard!\n            </Text>\n          )}\n          {Platform.OS === \"web\" ? (\n            <Touchable onClick={onShareWeb} style={styles.actionButton}>\n              <FontAwesome size={20} name=\"share\" />\n            </Touchable>\n          ) : (\n              <Touchable onPress={onShare} style={styles.actionButton}>\n                <FontAwesome size={20} name=\"share\" />\n              </Touchable>\n            )}\n          <Touchable\n            onPress={event => {\n              event.preventDefault();\n              event.stopPropagation();\n              deletePaletteByName(props.name);\n            }}\n            style={styles.actionButton}\n          >\n            <FontAwesome size={20} name=\"trash\" />\n          </Touchable>\n        </View>\n      </View>\n    </Card>\n  );\n};\n\nconst styles = StyleSheet.create({\n  bottom: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    padding: 16,\n    height: 54\n  },\n  actionButtonsView: {\n    flexDirection: \"row\",\n    alignItems: \"flex-end\"\n  },\n  actionButton: {\n    padding: 8\n  },\n  label: {\n    flex: 1,\n    marginHorizontal: 16,\n    color: Colors.darkGrey\n  }\n});\n","import kmeans from \"ml-kmeans\";\nimport Jimp from \"jimp\";\nimport Color from \"pigment/full\";\nexport default class ColorPicker {\n  static getProminentColors(image) {\n    /*\n    Jimp.RESIZE_NEAREST_NEIGHBOR;\n    Jimp.RESIZE_BILINEAR;\n    Jimp.RESIZE_BICUBIC;\n    Jimp.RESIZE_HERMITE;\n    Jimp.RESIZE_BEZIER;\n    These does not work with first params.\n    */\n    image.resize(Jimp.AUTO, 100);\n    let data = ColorPicker._prepareDataForKmeans(image);\n    let time = Date.now();\n    let ans = kmeans(data, 24, { initialization: \"random\", maxIterations: 20 });\n    ans.centroids = ans.centroids.sort((c1, c2) => c2.size - c1.size);\n    let kmeansColors = ans.centroids.map(centroid => {\n      return new Color(this._labToHex(centroid.centroid));\n    });\n    return this._getFinalColors(kmeansColors).map(c => {\n      return { color: c.tohex() };\n    });\n  }\n  // original implementation in java: https://github.com/kamalkishor1991/croma/blob/master/src/main/java/org/numixproject/colorextractor/image/KMeansColorPicker.java\n  static _getFinalColors(kmeansColors) {\n    kmeansColors.sort(\n      (c1, c2) => this._toArray(c1.tohsv())[0] < this._toArray(c2.tohsv())[0]\n    );\n    let filteredColors = [];\n    for (let i = 0; i < kmeansColors.length; i += 4) {\n      let colorList = [];\n      for (let j = 0; j < 4; j++) {\n        colorList.push(kmeansColors[i + j]);\n      }\n      colorList.sort(\n        (c1, c2) => this._toArray(c1.tohsv())[1] < this._toArray(c2.tohsv())[1]\n      );\n      filteredColors.push(colorList[colorList.length - 1]);\n      filteredColors.push(colorList[colorList.length - 2]);\n    }\n    let finalColors = [];\n    for (let i = 0; i < filteredColors.length; i += 2) {\n      if (\n        this._toArray(filteredColors[i].tohsv())[2] >\n        this._toArray(filteredColors[i + 1].tohsv())[2]\n      ) {\n        finalColors.push(filteredColors[i]);\n      } else {\n        finalColors.push(filteredColors[i + 1]);\n      }\n    }\n    return finalColors;\n  }\n\n  static _labToHex(lab) {\n    let color = new Color(\n      \"lab(\" + lab[0] + \", \" + lab[1] + \", \" + lab[2] + \")\"\n    );\n    return color.tohex();\n  }\n\n  static _prepareDataForKmeans(image) {\n    let data = [];\n\n    for (let i = 0; i < image.bitmap.width; i++) {\n      for (let j = 0; j < image.bitmap.height; j++) {\n        let intColor = image.getPixelColor(i, j);\n        let hex = this._toHexColor(intColor);\n        let color = new Color(hex);\n        let xyz = color.tolab();\n        // format: \"xyz(19.78527130484015, 8.600439447528947, 95.19796416837329)\" to double array of xyz\n        xyz = xyz\n          .substr(4, xyz.length - 5)\n          .split(\", \")\n          .map(v => parseFloat(v));\n        data.push(xyz);\n      }\n    }\n\n    return data;\n  }\n\n  static _toHexColor(intColor) {\n    let rgba = Jimp.intToRGBA(intColor); // TODO: Need to optimize this once everything else starts working.\n    let color = new Color(\n      \"rgb(\" + rgba.r + \", \" + rgba.g + \", \" + rgba.b + \")\"\n    );\n    return color.tohex();\n  }\n\n  static _toArray(color) {\n    let index = color.indexOf(\"(\");\n    color = color.substr(index + 1, color.length - index);\n    return color.split(\", \").map(c => parseFloat(c));\n  }\n}\n","import React, { useState } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  Clipboard,\n  Platform,\n  ToastAndroid\n} from \"react-native\";\nimport { FontAwesome } from \"@expo/vector-icons\";\n\nimport Touchable from \"react-native-platform-touchable\";\n\nimport Color from \"pigment/full\";\n\nexport function ColorDetail(props) {\n  const [copyiedIndex, setCopyiedIntex] = useState(-1);\n  const styles = StyleSheet.create({\n    backgroundColor: {\n      backgroundColor: props.color,\n      height: 112,\n      alignSelf: \"stretch\"\n    },\n    info: {\n      flexDirection: \"row\",\n      justifyContent: \"space-between\",\n      padding: 10\n    },\n    colorNameText: {\n      fontSize: 16,\n      fontWeight: \"500\"\n    }\n  });\n  const color = new Color(props.color);\n  let items = [\n    { key: \"HEX\", value: color.tohex() },\n    { key: \"RGB\", value: color.torgb() },\n    { key: \"HSL\", value: color.tohsl() },\n    { key: \"HSV\", value: color.tohsv() },\n    { key: \"HWB\", value: color.tohwb() },\n    { key: \"CMYK\", value: color.tocmyk() },\n    { key: \"CIELAB\", value: color.tolab() },\n    { key: \"Luminance\", value: (color.luminance() * 100).toFixed(2) + \"%\" },\n    { key: \"Darkness\", value: (color.darkness() * 100).toFixed(2) + \"%\" }\n  ];\n\n  const debounce = (func, delay) => {\n    let debounceTimer;\n    return function() {\n      const context = this;\n      const args = arguments;\n      clearTimeout(debounceTimer);\n      debounceTimer = setTimeout(() => func.apply(context, args), delay);\n    };\n  };\n  const debouncedSetCopiedIndex = debounce(() => setCopyiedIntex(-1), 2000);\n\n  let writeToClipboard = function(value, index) {\n    if (Platform.OS === \"android\") {\n      ToastAndroid.show(\"Text copied to clipboard!\", ToastAndroid.LONG);\n    }\n    Clipboard.setString(value);\n    setCopyiedIntex(index);\n    debouncedSetCopiedIndex();\n  };\n  return (\n    <View\n      style={{\n        flex: 1,\n        flexDirection: \"column\",\n        padding: 8,\n        backgroundColor: \"#fff\"\n      }}\n    >\n      <View style={[styles.backgroundColor]}></View>\n      {/* <Text {...props} style={[props.style, { fontFamily: 'space-mono' }]} >{props.color}</Text> */}\n      <View style={{ marginTop: 20 }}>\n        {items.map((item, index) => (\n          <Touchable\n            key={item.key}\n            onPress={() => writeToClipboard(item.value, index)}\n          >\n            <View style={styles.info}>\n              <Text style={styles.colorNameText}>{item.key} : </Text>\n\n              <Text>{item.value}</Text>\n              {index === copyiedIndex && Platform.OS === \"web\" && (\n                <Text\n                  style={{\n                    position: \"absolute\",\n                    backgroundColor: \"rgb(64, 64, 58)\",\n                    top: \"-25px\",\n                    right: \"-10px\",\n                    color: \"#fff\",\n                    padding: \"5px\",\n                    textAlign: \"center\",\n                    borderRadius: \"6px\"\n                  }}\n                >\n                  Copied!\n                </Text>\n              )}\n              <FontAwesome name=\"copy\" />\n            </View>\n          </Touchable>\n        ))}\n      </View>\n    </View>\n  );\n}\n","import * as React from \"react\";\nimport { StyleSheet, Text } from \"react-native\";\nimport Touchable from \"react-native-platform-touchable\";\n\nexport default class CromaButton extends React.Component {\n  render() {\n    const { style, onPress, children } = this.props;\n    return (\n      <Touchable style={[styles.button, style]} onPress={onPress}>\n        <Text style={styles.text}> {children} </Text>\n      </Touchable>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    shadowColor: \"rgba(0,0,0, .4)\",\n    shadowOffset: { height: 1, width: 1 },\n    shadowOpacity: 1,\n    shadowRadius: 1,\n    backgroundColor: \"#fff\",\n    elevation: 2,\n    height: 50,\n    marginTop: 10,\n    marginBottom: 10,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  text: {\n    textTransform: \"uppercase\",\n    fontWeight: \"700\",\n    color: '#484a4c'\n  }\n});\n","import React from \"react\";\nimport { ScrollView, StyleSheet, Button } from \"react-native\";\nimport { ColorDetail } from \"../components/ColorDetails\";\nimport CromaButton from \"../components/CromaButton\";\n\nexport default function ColorDetailScreen(props) {\n  const color = props.navigation.getParam(\"color\");\n  return (\n    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>\n      <ColorDetail navigation={props.navigation} color={color}>\n        {color}\n      </ColorDetail>\n      <CromaButton\n        onPress={() => props.navigation.navigate(\"Palettes\", { color: color })}\n      >\n        See color palettes\n      </CromaButton>\n    </ScrollView>\n  );\n}\n\nColorDetailScreen.navigationOptions = ({ navigation }) => {\n  return {\n    title: navigation.getParam(\"color\")\n  };\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingLeft: 12,\n    paddingRight: 12\n  }\n});\n","import React, { useState } from \"react\";\nimport { ScrollView, View, StyleSheet } from \"react-native\";\nimport CromaButton from \"../components/CromaButton\";\nimport { CromaColorPicker as ColorPicker } from \"croma-color-picker\";\nexport default function ColorPickerScreen(props) {\n  const [color, setColor] = useState(\"#db0a5b\");\n  return (\n    <ScrollView showsVerticalScrollIndicator={false}>\n      <View style={styles.container}>\n        <ColorPicker\n          onChangeColor={color => {\n            setColor(color);\n          }}\n          style={[{ height: 350, flex: 1 }]}\n        />\n        <CromaButton\n          onPress={() => {\n            props.navigation.goBack();\n            props.navigation.getParam(\"onDone\")({ color: color });\n          }}\n        >\n          Done\n        </CromaButton>\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: \"column\",\n    margin: 8\n  }\n});\n","import * as React from \"react\";\nimport { StyleSheet, View, Text } from \"react-native\";\nimport Card from \"./Card\";\nimport Colors from \"../constants/Colors\";\nimport MultiColorView from \"./MultiColorView\";\n\nexport class PalettePreviewCard extends React.Component {\n  render() {\n    return (\n      <Card {...this.props}>\n        <View>\n          <MultiColorView {...this.props}></MultiColorView>\n          <View style={styles.bottom}>\n            <Text style={styles.label}>{this.props.name}</Text>\n          </View>\n        </View>\n      </Card>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  bottom: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    height: 48\n  },\n  label: {\n    flex: 1,\n    fontWeight: \"500\",\n    marginHorizontal: 16,\n    color: Colors.darkGrey\n  }\n});\n","import React from \"react\";\nimport { ScrollView, StyleSheet, Text } from \"react-native\";\nimport Color from \"pigment/full\";\nimport { PalettePreviewCard } from \"../components/PalettePreviewCard\";\nexport default function PalettesScreen(props) {\n  // Convert camelCase to sentence\n  const parseCamelCase = text => {\n    if (typeof text !== \"string\") {\n      return \"\";\n    }\n    return text\n      .replace(/([a-z])([A-Z])/g, \"$1 $2\")\n      .replace(/\\b([A-Z]+)([A-Z])([a-z])/, \"$1 $2$3\")\n      .replace(/^./, str => str.toUpperCase());\n  };\n  const color = new Color(props.navigation.getParam(\"color\"));\n  let items = [];\n  for (const i in color) {\n    if (/.*scheme$/i.test(i) && typeof color[i] === \"function\") {\n      let colors = [];\n      const paletteColors = color[i]();\n      paletteColors.forEach(c => colors.push({ color: c.tohex() }));\n      items.push(\n        <PalettePreviewCard\n          onPress={() =>\n            props.navigation.navigate(\"ColorList\", { colors: colors })\n          }\n          key={i.toString()}\n          colors={colors}\n          name={parseCamelCase(i.toString())}\n        ></PalettePreviewCard>\n      );\n    }\n  }\n  return (\n    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>\n      {items}\n    </ScrollView>\n  );\n}\n\nPalettesScreen.navigationOptions = ({ navigation }) => {\n  return {\n    title: navigation.getParam(\"color\")\n  };\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingLeft: 12,\n    paddingRight: 12\n  }\n});\n","import React, { useState, useEffect } from \"react\";\nimport { Text, View, StyleSheet, TextInput, Platform } from \"react-native\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport { PalettePreviewCard } from \"../components/PalettePreviewCard\";\nimport Colors from \"../constants/Colors\";\nimport CromaButton from \"../components/CromaButton\";\nimport { Croma } from \"../store/store\";\nimport { TextDialog } from \"./CommanDialogs\";\n\nexport const SavePalette = props => {\n  const [paletteName, setPaletteName] = useState(\n    props.navigation.getParam(\"name\") ? props.navigation.getParam(\"name\") : \"\"\n  );\n  const [finalColors, setFinalColors] = useState([]);\n  const [isUnlockProNotification, setIsUnlockProNotifiction] = useState(false);\n  const [isPaletteNameExist, setIsPaletteNameExist] = React.useState(false);\n  const { addPalette, allPalettes, isPro } = React.useContext(Croma);\n\n  useEffect(() => {\n    let colorsFromParams = props.navigation.getParam(\"colors\");\n    if (typeof colorsFromParams === \"string\") {\n      colorsFromParams = JSON.parse(colorsFromParams);\n    }\n    const colors = [...new Set(colorsFromParams || [])];\n    setIsUnlockProNotifiction(!isPro && colors.length > 4);\n    setFinalColors(colors);\n    setTimeout(() => {\n      setIsUnlockProNotifiction(false);\n    }, 5000);\n  }, []);\n\n  const { title, navigationPath } = props;\n  return (\n    <ScrollView style={{margin: 8}} showsVerticalScrollIndicator={false}>\n      <PalettePreviewCard\n        colors={finalColors.slice(\n          0,\n          isPro ? finalColors.length : 4\n        )}\n        name={paletteName}\n      />\n      <View style={styles.card}>\n        <Text style={[styles.label, styles.title]}>{title}</Text>\n        <TextInput\n          style={styles.input}\n          value={paletteName}\n          placeholder=\"Enter a name for the palette\"\n          onChangeText={name => setPaletteName(name)}\n        />\n      </View>\n      <CromaButton\n        onPress={async () => {\n          if (allPalettes[paletteName]) {\n            setIsPaletteNameExist(true);\n            setTimeout(() => {\n              setIsPaletteNameExist(false);\n            }, 3000);\n            return null;\n          }\n          const palette = { name: paletteName, colors: finalColors };\n          addPalette(palette);\n          if (navigationPath === \"Palette\") {\n            props.navigation.navigate(navigationPath, palette);\n          } else {\n            props.navigation.navigate(navigationPath);\n          }\n        }}\n      >\n        Save palette\n      </CromaButton>\n      {isPaletteNameExist && (\n        <TextDialog text={\"A palette with same name already exists.\"} />\n      )}\n      {isUnlockProNotification && (\n        <TextDialog text={\"Unlock pro to save more than 4 colors!\"} />\n      )}\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  card: {\n    flex: 1,\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    shadowColor: \"rgba(0,0,0, .4)\",\n    shadowOffset: { height: 1, width: 1 },\n    shadowOpacity: 1,\n    shadowRadius: 1,\n    backgroundColor: \"#fff\",\n    elevation: 2,\n    height: 92,\n    marginVertical: 10,\n    padding: 10\n  },\n  title: {\n    fontWeight: \"700\"\n  },\n  input: {\n    flex: 1,\n    borderBottomColor: \"black\",\n    borderBottomWidth: 1\n  },\n  bottom: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    padding: 16,\n    height: 54\n  },\n  label: {\n    flex: 1,\n    color: Colors.darkGrey\n  }\n});\n","import * as React from \"react\";\nimport { View, StyleSheet, Text } from \"react-native\";\n\nexport class SingleColorView extends React.Component {\n  render() {\n    return (\n      <View style={[styles.container, { backgroundColor: this.props.color }]}>\n        <Text style={styles.colorText}>{this.props.color}</Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 56,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  colorText: {\n    fontWeight: \"700\",\n    backgroundColor: \"rgba(255, 255, 255, .3)\",\n    paddingLeft: 8,\n    paddingRight: 8\n  }\n});\n","import React from \"react\";\nimport { SingleColorView } from \"../components/SingleColorView\";\nimport { ScrollView, StyleSheet } from \"react-native\";\nimport CromaButton from \"../components/CromaButton\";\n\nexport default function ColorListScreen(props) {\n  const colors = uniqueColors(props.navigation.getParam(\"colors\"));\n  return (\n    <ScrollView style={styles.listview} showsVerticalScrollIndicator={false}>\n      {colors.map(color => (\n        <SingleColorView key={color.color} color={color.color} />\n      ))}\n      <CromaButton\n        onPress={() =>\n          props.navigation.navigate(\"SavePalette\", { colors: colors })\n        }\n      >\n        SAVE AS NEW PALETTE\n      </CromaButton>\n    </ScrollView>\n  );\n}\nfunction uniqueColors(colors) {\n  let set = new Set();\n  let uniqueColors = [];\n  colors.forEach(color => {\n    if (!set.has(color.color)) {\n      uniqueColors.push(color);\n    }\n    set.add(color.color);\n  });\n  return uniqueColors;\n}\n\nColorListScreen.navigationOptions = {\n  title: \"Colors\"\n};\n\nconst styles = StyleSheet.create({\n  listview: {\n    margin: 8\n  }\n});\n","import * as React from \"react\";\nimport { StyleSheet, View, Text } from \"react-native\";\nimport Card from \"./Card\";\nimport Colors from \"../constants/Colors\";\nimport { FontAwesome } from \"@expo/vector-icons\";\nimport Touchable from \"react-native-platform-touchable\";\n\nexport default class SingleColorCard extends React.Component {\n  render() {\n    return (\n      <Card {...this.props}>\n        <View>\n          <View\n            style={{ backgroundColor: this.props.color, height: 100 }}\n          ></View>\n          <View style={styles.bottom}>\n            <Text style={styles.label}>{this.props.color}</Text>\n            <View style={styles.actionButtonsView}>\n              <Touchable\n                onPress={event => {\n                  event.preventDefault();\n                  event.stopPropagation();\n                  this.props.colorDeleteFromPalette();\n                }}\n                style={styles.actionButton}\n              >\n                <FontAwesome size={20} name=\"trash\" />\n              </Touchable>\n            </View>\n          </View>\n        </View>\n      </Card>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  bottom: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    padding: 16,\n    height: 54\n  },\n  actionButtonsView: {\n    flexDirection: \"row\",\n    alignItems: \"flex-end\"\n  },\n  actionButton: {\n    paddingRight: 16\n  },\n  label: {\n    flex: 1,\n    marginHorizontal: 16,\n    fontWeight: \"500\",\n    color: Colors.darkGrey\n  }\n});\n","import React from \"react\";\n\nimport SingleColorCard from \"../components/SingleColorCard\";\nimport {\n  ScrollView,\n  StyleSheet,\n  View,\n  Dimensions,\n  Platform,\n  ToastAndroid\n} from \"react-native\";\nimport { UndoDialog, DialogContainer } from \"../components/CommanDialogs\";\nimport { Croma } from \"../store/store\";\nimport ActionButton from \"react-native-action-button\";\nimport Colors from \"../constants/Colors\";\nimport { Header } from \"react-navigation\";\nimport EmptyView from \"../components/EmptyView\";\nexport default function PaletteScreen(props) {\n  const { height, width } = Dimensions.get(\"window\");\n  const paletteName = props.navigation.getParam(\"name\");\n  const {\n    isPro,\n    allPalettes,\n    colorDeleteFromPalette,\n    undoColorDeletion,\n    addColorToPalette\n  } = React.useContext(Croma);\n  const colors = allPalettes[paletteName].colors;\n  const deletedColors = allPalettes[paletteName].deletedColors\n    ? allPalettes[paletteName].deletedColors\n    : [];\n\n  const deleteColor = index => {\n    colorDeleteFromPalette(props.navigation.getParam(\"name\"), index);\n  };\n\n  return (\n    <>\n      <View\n        style={(styles.container, { minHeight: height - Header.HEIGHT - 16 })}\n      >\n        <ScrollView\n          style={styles.listview}\n          showsVerticalScrollIndicator={false}\n        >\n          {colors.slice(0, isPro ? colors.length : 4).map((colorObj, index) => {\n            return (\n              <SingleColorCard\n                key={colorObj.color}\n                onPress={() =>\n                  props.navigation.navigate(\"ColorDetails\", {\n                    color: colorObj.color\n                  })\n                }\n                color={colorObj.color}\n                colorDeleteFromPalette={() => {\n                  deleteColor(index);\n                }}\n              ></SingleColorCard>\n            );\n          })}\n          <EmptyView />\n        </ScrollView>\n        <ActionButton\n          offsetY={60}\n          bgColor=\"rgba(68, 68, 68, 0.6)\"\n          hideShadow={Platform.OS === \"web\" ? true : false}\n          buttonColor={Colors.accent}\n          onPress={() => {\n            if (Platform.OS === 'android' && colors.length >= 4 && isPro === false) {\n              ToastAndroid.show(\"Unlock pro to add more than 4 colors!\", ToastAndroid.LONG);\n            } else {\n              props.navigation.navigate(\"ColorPicker\", {\n                onDone: color => {\n                  addColorToPalette(paletteName, color);\n                }\n              });\n            }\n          }}\n          style={Platform.OS === 'web' ? styles.actionButtonWeb : {}}\n        />\n      </View>\n      <DialogContainer>\n        {deletedColors.map(colorObj => (\n          <UndoDialog\n            name={colorObj.color}\n            undoDeletionByName={colorName => {\n              undoColorDeletion(paletteName, colorName);\n            }}\n          />\n        ))}\n      </DialogContainer>\n    </>\n  );\n}\nPaletteScreen.navigationOptions = ({ navigation }) => {\n  return {\n    title: navigation.getParam(\"name\")\n  };\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  listview: {\n    margin: 8\n  },\n  actionButtonWeb: {\n    position: 'fixed',\n    transform: 'scale(1) rotate(0deg) !important', \n    right: (Dimensions.get(\"window\").width - 600) / 2,\n    left: (Dimensions.get(\"window\").width - 600) / 2\n  }\n});\n","import React from \"react\";\nimport { Platform, Linking } from \"react-native\";\nimport { createStackNavigator } from \"react-navigation\";\nimport { createAppContainer } from \"react-navigation\";\nimport ColorDetailsScreen from \"../screens/ColorDetailScreen\";\nimport ColorPickerScreen from \"../screens/ColorPickerScreen\";\nimport PalettesScreen from \"../screens/PalettesScreen\";\nimport SavePaletteScreen from \"../screens/SavePaletteScreen\";\nimport AddPaletteManuallyScreen from \"../screens/AddPaletteManuallyScreen\";\nimport ColorListScreen from \"../screens/ColorListScreen\";\nimport PaletteScreen from \"../screens/PaletteScreen\";\nimport HomeScreen from \"../screens/HomeScreen\";\nimport Colors from \"../constants/Colors\";\nimport { Entypo } from \"@expo/vector-icons\";\nimport Touchable from \"react-native-platform-touchable\";\n\n\n\nconst config = Platform.select({\n  web: { headerMode: \"screen\" },\n  default: {}\n});\nconst RootStack = createStackNavigator(\n  {\n    ColorDetails: ColorDetailsScreen,\n    ColorPicker: ColorPickerScreen,\n    Palettes: PalettesScreen,\n    SavePalette: SavePaletteScreen,\n    ColorList: ColorListScreen,\n    Palette: PaletteScreen,\n    Home: HomeScreen,\n    AddPaletteManually: AddPaletteManuallyScreen\n  },\n  {\n    initialRouteName: \"Home\",\n    transparentCard: true,\n    /* The header config from HomeScreen is now here */\n    defaultNavigationOptions: {\n      headerStyle: {\n        backgroundColor: Colors.primary,\n      },\n      headerRight: (\n        Platform.OS === 'web' ?\n          <>\n            <Touchable\n              style={{ padding: '5px' }}\n              onPress={() => {\n                Linking.openURL(\n                  \"https://play.google.com/store/apps/details?id=app.croma\"\n                )\n              }}\n            >\n              <Entypo name=\"google-play\" style={{\n                fontSize: 25,\n                height: 25,\n                color: \"white\"\n              }} />\n            </Touchable>\n            <Touchable\n              style={{ padding: '5px', marginRight: '10px' }}\n              onPress={() => {\n                Linking.openURL(\n                  \"https://github.com/croma-app/croma-react\"\n                )\n              }}\n            >\n              <Entypo name=\"github\" style={{\n                fontSize: 25,\n                height: 25,\n                color: \"white\"\n              }} />\n            </Touchable>\n          </>\n          : ''\n      ),\n      headerTintColor: \"#fff\"\n    }\n  }\n);\n\nconst AppContainer = createAppContainer(RootStack);\n\nexport default RootStack;\n","import React from \"react\";\nimport { ScrollView } from \"react-native\";\nimport { SavePalette } from \"../components/SavePalette\";\n\nexport default function SavePaletteScreen(props) {\n  return (\n    <ScrollView showsVerticalScrollIndicator={false}>\n      <SavePalette\n        title={\"ADD NEW PALETTE\"}\n        navigationPath={\"Home\"}\n        navigation={props.navigation}\n      />\n    </ScrollView>\n  );\n}\n","import React from \"react\";\nimport { ScrollView } from \"react-native\";\nimport { SavePalette } from \"../components/SavePalette\";\n\nexport default function AddPaletteManuallyScreen(props) {\n  return (\n    <ScrollView showsVerticalScrollIndicator={false}>\n      <SavePalette\n        title={\"ADD PALETTE NAME\"}\n        navigationPath={\"Palette\"}\n        navigation={props.navigation}\n      />\n    </ScrollView>\n  );\n}\n","import { createBrowserApp } from \"@react-navigation/web\";\nimport { createSwitchNavigator } from \"react-navigation\";\n\nimport MainTabNavigator from \"./MainTabNavigator\";\n\nconst switchNavigator = createSwitchNavigator({\n  // You could add another route here for authentication.\n  // Read more at https://reactnavigation.org/docs/en/auth-flow.html\n  Main: MainTabNavigator\n});\nswitchNavigator.path = \"\";\n\nexport default createBrowserApp(switchNavigator, { history: \"hash\" });\n","import React from 'react';\nimport { Platform } from \"react-native\";\n\n\nexport default class ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { hasError: false };\n    }\n\n    componentDidCatch(error, info) {\n        if (Platform.OS === 'web') {\n            window.location = '/';\n        }\n        this.setState({ hasError: true });\n    }\n\n    render() {\n        if (this.state.hasError) {\n            // You can render any custom fallback UI\n            return <h1>Something went wrong.</h1>;\n        }\n        return this.props.children;\n    }\n}","import React, { useState, useEffect } from \"react\";\nimport { Platform, StatusBar, StyleSheet, View } from \"react-native\";\nimport Colors from \"./constants/Colors\";\nimport AppNavigator from \"./navigation/AppNavigator\";\nimport { ActivityIndicator } from \"react-native\";\nimport applicationHook, { initState, Croma } from \"./store/store\";\nimport ErrorBoundary from \"./components/ErrorBoundary\"\n\nexport default function App(props) {\n  const [isPalettesLoaded, setIsPalettesLoaded] = useState(false);\n  const applicationState = applicationHook(initState);\n\n  useEffect(() => {\n    (async () => {\n      await applicationState.loadInitPaletteFromStore();\n      setIsPalettesLoaded(true);\n    })();\n    if (Platform.OS === \"web\") {\n      applicationState.setPurchase({\n        platfrom: \"web\"\n      });\n    }\n  }, []);\n  return !isPalettesLoaded ? (\n    <View style={{ flex: 1, marginTop: \"20%\" }}>\n      <ActivityIndicator size=\"large\" color=\"#ef635f\" animating={true} />\n    </View>\n  ) : (\n      <Croma.Provider value={applicationState}>\n        <ErrorBoundary>\n          <View style={[styles.container]}>\n            <StatusBar\n              barStyle=\"light-content\"\n              // dark-content, light-content and default\n              hidden={false}\n              //To hide statusBar\n              backgroundColor={Colors.primaryDark}\n              //Background color of statusBar only works for Android\n              translucent={false}\n              //allowing light, but not detailed shapes\n              networkActivityIndicatorVisible={true}\n            />\n            <View\n              style={[{ flex: 1, backgroundColor: \"transparent\", maxWidth: 600 }]}\n            >\n              {Platform.OS === \"ios\" && <StatusBar barStyle=\"default\" />}\n              <AppNavigator />\n            </View>\n          </View>\n        </ErrorBoundary>\n      </Croma.Provider>\n    );\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    backgroundColor: Colors.backgroundColor,\n    flexDirection: \"row\"\n  }\n});\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","const tintColor = \"#2f95dc\";\n\nexport default {\n  tintColor,\n  tabIconDefault: \"#ccc\",\n  tabIconSelected: tintColor,\n  tabBar: \"#fefefe\",\n  errorBackground: \"red\",\n  errorText: \"#fff\",\n  warningBackground: \"#EAEB5E\",\n  warningText: \"#666804\",\n  noticeBackground: tintColor,\n  noticeText: \"#fff\",\n  primary: \"#f1544d\",\n  primaryDark: \"#c94740\",\n  text: \"#fff\",\n  accent: \"#f0d04c\",\n  grey: \"#888\",\n  darkGrey: \"#333\",\n  lightGrey: \"#eee\",\n  white: \"#fff\",\n  black: \"#000\",\n  fadedBlack: \"rgba(0, 0, 0, .5)\",\n  backgroundColor: \"#f2f2f2\"\n};\n","import { AsyncStorage } from \"react-native\";\nconst APPLICATION_STATE_KEY = \"APLICATION_STATE\";\nconst IS_USER_ALREADY_EXIST_KEY = \"IS_USER_ALREADY_EXIST\";\nexport default class Storage {\n  static getApplicationState = async () => {\n    let state = await AsyncStorage.getItem(APPLICATION_STATE_KEY);\n    if (state) {\n      return JSON.parse(state);\n    } else {\n      return {};\n    }\n  };\n\n  static setApplicationState = async state => {\n    await AsyncStorage.setItem(APPLICATION_STATE_KEY, JSON.stringify(state));\n  };\n\n  static setUserAlreadyExists = async () => {\n    await AsyncStorage.setItem(IS_USER_ALREADY_EXIST_KEY, \"true\");\n  };\n\n  static checkUserAlreadyExists = async () => {\n    return await AsyncStorage.getItem(IS_USER_ALREADY_EXIST_KEY);\n  };\n}\n","import React, { useState, useEffect } from \"react\";\nimport Storage from \"./../libs/Storage\";\nconst UNDO_TIMEOUT = 3000;\n\nexport const initState = {\n  allPalettes: {},\n  deletedPalettes: {},\n  isLoading: false,\n  isPro: false\n};\n\nconst syncStateToStore = function(state) {\n  Storage.setApplicationState(state);\n};\n\nconst sortPalette = palette =>\n  palette.colors.sort((a, b) => (a.color > b.color ? 1 : -1));\n\nexport default function applicationHook(initState) {\n  const addPalette = async palette => {\n    setState(state => {\n      const { allPalettes } = state;\n      sortPalette(palette);\n      allPalettes[palette.name] = palette;\n      return { ...state, allPalettes };\n    });\n  };\n\n  const loadInitPaletteFromStore = async () => {\n    // Loading application state from localStorage\n    const _state = await Storage.getApplicationState();\n    setState(state => ({\n      ...state,\n      ..._state\n    }));\n\n    // Setting default palette when user comming first time\n    let defaultPalettes = {};\n    const isUserAleadyExits = await Storage.checkUserAlreadyExists();\n    if (isUserAleadyExits != \"true\") {\n      Storage.setUserAlreadyExists();\n      defaultPalettes = {\n        name: \"Croma example palette\",\n        colors: [\n          { color: \"#F0675F\" },\n          { color: \"#F3D163\" },\n          { color: \"#EBEF5C\" },\n          { color: \"#C9EF5B\" }\n        ]\n      };\n      addPalette(defaultPalettes);\n    }\n  };\n\n  const removePaletteFromStateByName = name => {\n    setState(state => {\n      const { deletedPalettes } = state;\n      delete deletedPalettes[name];\n      return { ...state, deletedPalettes };\n    });\n  };\n\n  const setPurchase = details => {\n    setState(state => {\n      return { ...state, isPro: true, purchaseDetails: details };\n    });\n  };\n\n  const addColorToPalette = (name, color) => {\n    setState(state => {\n      const { allPalettes } = state;\n      allPalettes[name].colors = allPalettes[name].colors.concat(color);\n      sortPalette(allPalettes[name]);\n      return { ...state, allPalettes };\n    });\n  };\n\n  const deletePaletteByName = async name => {\n    setState(state => {\n      const { allPalettes } = state;\n      const { deletedPalettes } = state;\n      if (allPalettes[name]) {\n        deletedPalettes[name] = { ...allPalettes[name] };\n        delete allPalettes[name];\n        setTimeout(() => {\n          removePaletteFromStateByName(name);\n        }, UNDO_TIMEOUT);\n        return { ...state, allPalettes, deletedPalettes };\n      }\n      return { ...state };\n    });\n  };\n\n  const undoDeletionByName = name => {\n    setState(state => {\n      const { deletedPalettes } = state;\n      if (deletedPalettes[name]) {\n        addPalette({ ...deletedPalettes[name] });\n        removePaletteFromStateByName(name);\n      }\n      return { ...state };\n    });\n  };\n\n  const colorDeleteFromPalette = (name, colorIndex) => {\n    setState(state => {\n      const { allPalettes } = state;\n      const deletedColor = allPalettes[name].colors.splice(colorIndex, 1);\n      if (allPalettes[name].deletedColors) {\n        allPalettes[name].deletedColors.push({ ...deletedColor[0] });\n      } else {\n        allPalettes[name].deletedColors = [...deletedColor];\n      }\n      setTimeout(() => {\n        clearDeletedColor(name, deletedColor[0].color);\n      }, UNDO_TIMEOUT);\n      return { ...state, allPalettes };\n    });\n  };\n\n  const undoColorDeletion = (name, colorName) => {\n    setState(state => {\n      const { allPalettes } = state;\n      allPalettes[name].colors.push({ color: colorName });\n      allPalettes[name].deletedColors.forEach((color, index) => {\n        if (color.color === colorName) {\n          allPalettes[name].deletedColors.splice(index, 1);\n        }\n      });\n      sortPalette(allPalettes[name]);\n      return { ...state, allPalettes };\n    });\n  };\n\n  const clearDeletedColor = (name, colorName) => {\n    setState(state => {\n      const { allPalettes } = state;\n      allPalettes[name].deletedColors.forEach((color, index) => {\n        if (color.color === colorName) {\n          allPalettes[name].deletedColors.splice(index, 1);\n        }\n      });\n      return { ...state, allPalettes };\n    });\n  };\n\n  const [state, setState] = useState({\n    ...initState,\n    loadInitPaletteFromStore,\n    undoDeletionByName,\n    deletePaletteByName,\n    addPalette,\n    colorDeleteFromPalette,\n    undoColorDeletion,\n    addColorToPalette,\n    setPurchase\n  });\n\n  // Sync state to local storage\n  if (\n    Object.keys(state.allPalettes).length !== 0 ||\n    Object.keys(state.deletedPalettes).length !== 0 ||\n    state.isPro !== initState.isPro\n  ) {\n    syncStateToStore(state);\n  }\n  return state;\n}\n\nexport const Croma = React.createContext();\n","import React from \"react\";\nimport { View, Text, StyleSheet } from \"react-native\";\nimport Touchable from \"react-native-platform-touchable\";\n\nexport const DialogContainer = props => (\n  <View style={{ position: \"absolute\", bottom: 0, width: \"100%\" }}>\n    {props.children}\n  </View>\n);\n\nexport const UndoDialog = props => {\n  /*\n    Todo - need to add deletion based on type \n  */\n  const { name, undoDeletionByName } = props;\n  return (\n    <View style={styles.undoCard}>\n      <View style={{ width: \"80%\" }}>\n        <Text style={styles.undoText}>Deleted {name}. </Text>\n      </View>\n      <Touchable\n        onPress={event => {\n          event.stopPropagation();\n          event.preventDefault();\n          undoDeletionByName(name);\n        }}\n      >\n        <Text style={styles.undoButton}> UNDO </Text>\n      </Touchable>\n    </View>\n  );\n};\n\nexport const TextDialog = props => (\n  <View style={styles.undoCard}>\n    <View style={{ width: \"80%\" }}>\n      <Text style={styles.undoText}>{props.text}</Text>\n    </View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  undoCard: {\n    backgroundColor: \"#303036\",\n    flexDirection: \"row\",\n    padding: 15,\n    marginTop: 1\n  },\n  undoText: {\n    color: \"#fff\"\n  },\n  undoButton: {\n    fontWeight: \"bold\",\n    color: \"#e6be0b\"\n  }\n});\n"],"sourceRoot":""}