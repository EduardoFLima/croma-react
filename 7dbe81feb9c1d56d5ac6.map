{"version":3,"sources":["/home/runner/work/croma-react/croma-react/components/Card.js","/home/runner/work/croma-react/croma-react/libs/Helpers.js","/home/runner/work/croma-react/croma-react/components/MultiColorView.js","/home/runner/work/croma-react/croma-react/components/EmptyView.js","/home/runner/work/croma-react/croma-react/screens/HomeScreen.js","/home/runner/work/croma-react/croma-react/components/PaletteCard.js","/home/runner/work/croma-react/croma-react/libs/ColorPicker.js","/home/runner/work/croma-react/croma-react/libs/ShareMenu.web.js","/home/runner/work/croma-react/croma-react/components/ColorDetails.js","/home/runner/work/croma-react/croma-react/components/CromaButton.js","/home/runner/work/croma-react/croma-react/screens/ColorDetailScreen.js","/home/runner/work/croma-react/croma-react/screens/ColorPickerScreen.js","/home/runner/work/croma-react/croma-react/components/PalettePreviewCard.js","/home/runner/work/croma-react/croma-react/screens/PalettesScreen.js","/home/runner/work/croma-react/croma-react/components/SavePalette.js","/home/runner/work/croma-react/croma-react/components/SingleColorView.js","/home/runner/work/croma-react/croma-react/screens/ColorListScreen.js","/home/runner/work/croma-react/croma-react/components/SingleColorCard.js","/home/runner/work/croma-react/croma-react/screens/PaletteScreen.js","/home/runner/work/croma-react/croma-react/navigation/MainTabNavigator.js","/home/runner/work/croma-react/croma-react/screens/SavePaletteScreen.js","/home/runner/work/croma-react/croma-react/screens/AddPaletteManuallyScreen.js","/home/runner/work/croma-react/croma-react/navigation/AppNavigator.web.js","/home/runner/work/croma-react/croma-react/components/ErrorBoundary.js","/home/runner/work/croma-react/croma-react/App.js","/home/runner/work/croma-react/croma-react/web-build/register-service-worker.js","/home/runner/work/croma-react/croma-react/constants/Colors.js","/home/runner/work/croma-react/croma-react/libs/Storage.js","/home/runner/work/croma-react/croma-react/store/store.js","/home/runner/work/croma-react/croma-react/components/CommanDialogs.js"],"names":["Card","animation","this","props","animationType","duration","useNativeDriver","Platform","OS","onClick","onPress","style","styles","inner","boxShadow","children","React","StyleSheet","create","backgroundColor","Colors","white","marginVertical","elevation","logEvent","eventName","value","NativeModules","CromaModule","MultiColorView","palette","alignItems","flexDirection","height","color","flex","colors","map","item","key","EmptyView","HomeScreen","Dimensions","get","width","useContext","Croma","isLoading","allPalettes","deletedPalettes","undoDeletionByName","isPro","setPurchase","useState","pickImgloading","setPickImgLoading","pickImageResult","base64","a","async","ImagePicker","mediaTypes","All","quality","useEffect","Permissions","status","alert","getPermissionAsync","Linking","getInitialURL","then","url","result","split","forEach","part","decodeURIComponent","navigation","navigate","Set","JSON","parse","name","ShareMenu","getSharedText","text","Color","i","l","length","tohex","toLowerCase","Object","keys","container","minHeight","Header","HEIGHT","showsVerticalScrollIndicator","slice","bgColor","hideShadow","buttonColor","accent","offsetY","spacing","fixNativeFeedbackRadius","actionButtonWeb","Item","title","navigateToColorPicker","pickedColors","console","log","actionButtonIcon","err","pickTopColorsFromImage","uri","ToastAndroid","show","LONG","undefined","Jimp","read","Buffer","pickImage","image","ColorPicker","getProminentColors","catch","onDone","primary","openURL","InAppBilling","open","purchase","details","close","navigationOptions","margin","justifyContent","fontSize","position","transform","right","Math","max","left","PaletteCard","shared","setShared","deletePaletteByName","setAnimationType","bottom","label","actionButtonsView","top","padding","textAlign","borderRadius","event","preventDefault","stopPropagation","Clipboard","setString","colorObj","join","encodeURIComponent","stringify","setTimeout","actionButton","size","Share","share","message","action","sharedAction","activityType","dismissedAction","marginHorizontal","darkGrey","resize","AUTO","data","_prepareDataForKmeans","ans","Date","now","kmeans","initialization","maxIterations","centroids","sort","c1","c2","kmeansColors","centroid","_labToHex","_getFinalColors","c","_toArray","tohsv","filteredColors","colorList","j","push","finalColors","lab","bitmap","intColor","getPixelColor","hex","_toHexColor","xyz","tolab","substr","v","parseFloat","rgba","intToRGBA","r","g","b","index","indexOf","ColorDetail","copyiedIndex","setCopyiedIntex","alignSelf","info","colorNameText","fontWeight","items","torgb","tohsl","tohwb","tocmyk","luminance","toFixed","darkness","debouncedSetCopiedIndex","func","delay","debounceTimer","context","args","arguments","clearTimeout","apply","debounce","View","marginTop","writeToClipboard","Text","FontAwesome","CromaButton","button","shadowColor","shadowOffset","shadowOpacity","shadowRadius","marginBottom","textTransform","ColorDetailScreen","getParam","ScrollView","paddingLeft","paddingRight","PalettePreviewCard","PalettesScreen","test","toString","replace","str","toUpperCase","SavePalette","paletteName","setPaletteName","setFinalColors","isUnlockProNotification","setIsUnlockProNotifiction","isPaletteNameExist","setIsPaletteNameExist","addPalette","colorsFromParams","navigationPath","card","TextInput","input","placeholder","onChangeText","borderBottomColor","borderBottomWidth","SingleColorView","colorText","ColorListScreen","set","uniqueColors","has","add","listview","SingleColorCard","state","setState","colorDeleteFromPalette","PaletteScreen","undoColorDeletion","addColorToPalette","deletedColors","deleteColor","ActionButton","colorName","RootStack","select","web","headerMode","default","createStackNavigator","ColorDetails","ColorDetailsScreen","setColor","onChangeColor","goBack","Palettes","ColorList","Palette","Home","AddPaletteManually","initialRouteName","cardStyle","defaultNavigationOptions","headerStyle","headerRight","Entypo","marginRight","headerTintColor","createAppContainer","switchNavigator","createSwitchNavigator","Main","MainTabNavigator","path","createBrowserApp","history","ErrorBoundary","hasError","error","window","location","Component","App","isPalettesLoaded","setIsPalettesLoaded","applicationState","applicationHook","initState","loadInitPaletteFromStore","platfrom","Provider","StatusBar","barStyle","hidden","primaryDark","translucent","networkActivityIndicatorVisible","maxWidth","className","ActivityIndicator","animating","navigator","addEventListener","serviceWorker","register","scope","tintColor","tabIconDefault","tabIconSelected","tabBar","errorBackground","errorText","warningBackground","warningText","noticeBackground","noticeText","grey","lightGrey","black","fadedBlack","Storage","getApplicationState","AsyncStorage","getItem","setApplicationState","setItem","setUserAlreadyExists","checkUserAlreadyExists","sortPalette","createdAt","valueOf","allPalettesArray","ordered","_palette","removePaletteFromStateByName","clearDeletedColor","splice","timeout","_state","loadOwnedPurchasesFromGoogle","isPurchased","colorIndex","deletedColor","concat","purchaseDetails","syncStateToStore","createContext","DialogContainer","DailogContainerWeb","DailogContainer","UndoDialog","undoCard","marginAndRadius","undoText","undoButton","TextDialog","display","min","zIndex"],"mappings":"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","file":"static/js/app.adddcee1.chunk.js","sourcesContent":["import * as React from \"react\";\nimport * as Animatable from \"react-native-animatable\";\nimport { StyleSheet, Platform, View } from \"react-native\";\nimport Colors from \"../constants/Colors\";\nimport Touchable from \"react-native-platform-touchable\";\n\nexport default class Card extends React.Component {\n  render() {\n    return (\n      <Animatable.View\n        animation={this.props.animationType}\n        duration={500}\n        useNativeDriver={true}\n      >\n        <Touchable\n          {...(Platform.OS === \"web\"\n            ? {\n                // When scrolling the document body, the touchables might be triggered\n                // see  https://github.com/necolas/react-native-web/issues/1219\n                onClick: this.props.onPress\n              }\n            : {\n                onPress: this.props.onPress\n              })}\n          style={[\n            styles.inner,\n            Platform.OS === \"web\" ? { boxShadow: \"0px 1px 4px #888888\" } : {}\n          ]}\n        >\n          <View {...this.props}>{this.props.children}</View>\n        </Touchable>\n      </Animatable.View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  inner: {\n    backgroundColor: Colors.white,\n    marginVertical: 8,\n    elevation: 1\n  }\n});\n","import { NativeModules, Platform } from \"react-native\";\n\nconst logEvent = (eventName, value) => {\n  if (Platform.OS == \"android\") {\n    NativeModules.CromaModule.logEvent(eventName, \"\" + value);\n  }\n};\n\nexport { logEvent };\n","import * as React from \"react\";\nimport { StyleSheet, View, Text } from \"react-native\";\nexport default function MultiColorView(props) {\n  const styles = StyleSheet.create({\n    palette: {\n      alignItems: \"stretch\",\n      flexDirection: \"row\",\n      height: 112\n    },\n    color: {\n      flex: 1\n    }\n  });\n  return (\n    <View style={styles.palette}>\n      {props.colors &&\n        props.colors.map(item => (\n          <View\n            style={[styles.color, { backgroundColor: item.color }]}\n            key={item.color}\n          />\n        ))}\n    </View>\n  );\n}\n","import * as React from \"react\";\nimport { View } from \"react-native\";\n\nconst EmptyView = () => <View style={{ height: 100 }}></View>;\n\nexport default EmptyView;\n","import React, { useEffect, useState } from \"react\";\nimport Color from \"pigment/full\";\nimport {\n  ScrollView,\n  StyleSheet,\n  ActivityIndicator,\n  View,\n  Dimensions,\n  Platform,\n  Linking,\n  ToastAndroid,\n  NativeModules\n} from \"react-native\";\nimport { PaletteCard } from \"../components/PaletteCard\";\nimport { UndoDialog, DialogContainer } from \"../components/CommanDialogs\";\nimport { Croma } from \"../store/store\";\nimport Colors from \"../constants/Colors\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport * as Permissions from \"expo-permissions\";\nimport ColorPicker from \"../libs/ColorPicker\";\nimport Jimp from \"jimp\";\nimport { Header } from \"react-navigation\";\nimport EmptyView from \"../components/EmptyView\";\nimport ActionButton from \"react-native-action-button\";\nimport { Ionicons, Entypo } from \"@expo/vector-icons\";\nimport InAppBilling from \"react-native-billing\";\nimport ShareMenu from \"../libs/ShareMenu\";\nimport { logEvent } from \"../libs/Helpers\";\n\nconst HomeScreen = function(props) {\n  const { height, width } = Dimensions.get(\"window\");\n  const {\n    isLoading,\n    allPalettes,\n    deletedPalettes,\n    undoDeletionByName,\n    isPro,\n    setPurchase\n  } = React.useContext(Croma);\n  const [pickImgloading, setPickImgLoading] = useState(false);\n  const pickImageResult = async base64 => {\n    return await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      quality: 1,\n      base64: base64\n    });\n  };\n  const pickImage = async () => {\n    let result = await pickImageResult(true);\n    if (result.base64 !== undefined) {\n      return await Jimp.read(new Buffer(result.base64, \"base64\"));\n    } else {\n      return await Jimp.read(result.uri);\n    }\n  };\n  const getPermissionAsync = async () => {\n    if (Platform.OS == \"ios\") {\n      const { status } = await Permissions.askAsync(Permissions.CAMERA_ROLL);\n      if (status !== \"granted\") {\n        alert(\"Sorry, we need camera roll permissions to make this work!\");\n      }\n    }\n  };\n  const purchase = async function() {\n    try {\n      await InAppBilling.open();\n      const details = await InAppBilling.purchase(\"croma_pro\");\n      ToastAndroid.show(\"Congrats, You are now a pro user!\", ToastAndroid.LONG);\n      setPurchase(details);\n    } catch (err) {\n      ToastAndroid.show(\"Purchase unsucceessful \" + err, ToastAndroid.LONG);\n    } finally {\n      await InAppBilling.close();\n    }\n  };\n  useEffect(() => {\n    getPermissionAsync();\n    if (Platform.OS === \"android\") {\n      // Deep linking code\n      // https://medium.com/react-native-training/deep-linking-your-react-native-app-d87c39a1ad5e\n      Linking.getInitialURL().then(url => {\n        if (url) {\n          const result = {};\n          url\n            .split(\"?\")[1]\n            .split(\"&\")\n            .forEach(function(part) {\n              var item = part.split(\"=\");\n              result[item[0]] = decodeURIComponent(item[1]);\n            });\n          props.navigation.navigate(\"SavePalette\", {\n            colors: [...new Set(JSON.parse(result[\"colors\"]) || [])],\n            name: result[\"name\"]\n          });\n        }\n      });\n\n      ShareMenu.getSharedText(text => {\n        if (text && typeof text === \"string\") {\n          const colors = Color.parse(text);\n          for (var i = 0, l = colors.length; i < l; i++) {\n            colors[i] = { color: colors[i].tohex().toLowerCase() };\n          }\n          props.navigation.navigate(\"SavePalette\", { colors });\n        }\n      });\n    }\n  }, []);\n  if (isLoading) {\n    return <ActivityIndicator />;\n  } else {\n    logEvent(\"startup_palatte_len\", Object.keys(allPalettes).length);\n    return (\n      <>\n        <View\n          style={[styles.container, { minHeight: height - Header.HEIGHT - 16 }]}\n        >\n          {pickImgloading ? <ActivityIndicator /> : <View />}\n          <ScrollView showsVerticalScrollIndicator={false}>\n            {Object.keys(allPalettes).map(name => {\n              return (\n                <PaletteCard\n                  key={name}\n                  colors={allPalettes[name].colors.slice(\n                    0,\n                    isPro ? allPalettes[name].colors.length : 4\n                  )}\n                  name={name}\n                  navigation={props.navigation}\n                />\n              );\n            })}\n            <EmptyView />\n          </ScrollView>\n        </View>\n\n        <DialogContainer>\n          {Object.keys(deletedPalettes).map(name => {\n            return (\n              <UndoDialog\n                key={name}\n                name={name}\n                undoDeletionByName={undoDeletionByName}\n              />\n            );\n          })}\n        </DialogContainer>\n        {/*Setting box shadow to false because of Issue on the web: https://github.com/mastermoo/react-native-action-button/issues/337 */}\n        <ActionButton\n          bgColor=\"rgba(68, 68, 68, 0.6)\"\n          hideShadow={Platform.OS === \"web\" ? true : false}\n          buttonColor={Colors.accent}\n          offsetY={60}\n          spacing={15}\n          key=\"action-button-home\"\n          fixNativeFeedbackRadius={true}\n          style={Platform.OS === \"web\" ? styles.actionButtonWeb : {}}\n        >\n          {Platform.OS === \"android\" && (\n            <ActionButton.Item\n              buttonColor=\"#60f0af\"\n              title=\"Pick colors from camera\"\n              onPress={() => {\n                NativeModules.CromaModule.navigateToColorPicker(\n                  pickedColors => {\n                    logEvent(\"pick_colors_from_camera\", pickedColors.length);\n                    console.log(\"Picked colors: \", pickedColors);\n                    props.navigation.navigate(\n                      \"ColorList\",\n                      JSON.parse(pickedColors)\n                    );\n                  }\n                );\n              }}\n            >\n              <Ionicons name=\"md-camera\" style={styles.actionButtonIcon} />\n            </ActionButton.Item>\n          )}\n          <ActionButton.Item\n            buttonColor=\"#9b59b6\"\n            title=\"Get palette from image\"\n            onPress={() => {\n              setPickImgLoading(true);\n              if (Platform.OS === \"android\") {\n                pickImageResult().then((result, err) => {\n                  NativeModules.CromaModule.pickTopColorsFromImage(\n                    result.uri,\n                    (err, pickedColors) => {\n                      logEvent(\"get_palette_from_image\");\n                      if (err) {\n                        ToastAndroid.show(\n                          \"Error while processing image: \" + err,\n                          ToastAndroid.LONG\n                        );\n                      } else {\n                        console.log(\"Picked colors: \", pickedColors);\n                        props.navigation.navigate(\n                          \"ColorList\",\n                          JSON.parse(pickedColors)\n                        );\n                      }\n                      setPickImgLoading(false);\n                    }\n                  );\n                });\n              } else {\n                pickImage()\n                  .then((image, err) => {\n                    setPickImgLoading(false);\n                    props.navigation.navigate(\"ColorList\", {\n                      colors: ColorPicker.getProminentColors(image)\n                    });\n                  })\n                  .catch(err => {\n                    if (Platform.OS == \"android\") {\n                      ToastAndroid.show(\n                        \"Error while processing image: \" + err,\n                        ToastAndroid.LONG\n                      );\n                    }\n                    setPickImgLoading(false);\n                  });\n              }\n            }}\n          >\n            <Ionicons name=\"md-image\" style={styles.actionButtonIcon} />\n          </ActionButton.Item>\n          <ActionButton.Item\n            buttonColor=\"#3498db\"\n            title=\"Get palette from color\"\n            onPress={() => {\n              logEvent(\"get_palette_from_color\");\n              props.navigation.navigate(\"ColorPicker\", {\n                onDone: color => {\n                  props.navigation.navigate(\"Palettes\", {\n                    color: color.color\n                  });\n                }\n              });\n            }}\n          >\n            <Ionicons name=\"md-color-palette\" style={styles.actionButtonIcon} />\n          </ActionButton.Item>\n          <ActionButton.Item\n            buttonColor=\"#1abc9c\"\n            title=\"Add colors manually\"\n            onPress={() => {\n              logEvent(\"add_colors_manually\");\n              props.navigation.navigate(\"AddPaletteManually\");\n            }}\n          >\n            <Ionicons name=\"md-color-filter\" style={styles.actionButtonIcon} />\n          </ActionButton.Item>\n          {Platform.OS === \"web\" && (\n            <ActionButton.Item\n              buttonColor={Colors.primary}\n              title=\"Get croma on playstore\"\n              onPress={() =>\n                Linking.openURL(\n                  \"https://play.google.com/store/apps/details?id=app.croma\"\n                )\n              }\n            >\n              <Entypo name=\"google-play\" style={styles.actionButtonIcon} />\n            </ActionButton.Item>\n          )}\n          {Platform.OS === \"android\" && !isPro && (\n            <ActionButton.Item\n              buttonColor={Colors.primary}\n              title=\"Unlock pro\"\n              onPress={() => {\n                purchase();\n              }}\n            >\n              <Ionicons name=\"md-unlock\" style={styles.actionButtonIcon} />\n            </ActionButton.Item>\n          )}\n        </ActionButton>\n      </>\n    );\n  }\n};\n\nexport default HomeScreen;\n\nHomeScreen.navigationOptions = {\n  title: \"Croma\"\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    margin: 8,\n    justifyContent: \"center\"\n  },\n  actionButtonIcon: {\n    fontSize: 20,\n    height: 22,\n    color: \"white\"\n  },\n  actionButtonWeb: {\n    position: \"fixed\",\n    transform: \"scale(1) rotate(0deg) !important\",\n    right: Math.max((Dimensions.get(\"window\").width - 600) / 2, 0),\n    left: Math.max((Dimensions.get(\"window\").width - 600) / 2, 0)\n  }\n});\n","import * as React from \"react\";\nimport { StyleSheet, View, Text, Platform, Clipboard } from \"react-native\";\nimport Card from \"./Card\";\nimport Colors from \"../constants/Colors\";\nimport { Share } from \"react-native\";\n\nimport MultiColorView from \"./MultiColorView\";\nimport { FontAwesome } from \"@expo/vector-icons\";\nimport Touchable from \"react-native-platform-touchable\";\nimport { Croma } from \"../store/store\";\n\nexport const PaletteCard = props => {\n  const [shared, setShared] = React.useState(false);\n  const { deletePaletteByName } = React.useContext(Croma);\n  const [animationType, setAnimationType] = React.useState(\"fadeInLeftBig\");\n  const onShare = async () => {\n    try {\n      const result = await Share.share({\n        message: `Croma - Palette Manager\\nColors:\\n${props.colors\n          .map(colorObj => colorObj.color)\n          .join(\"\\n\")}\n      \n          https://croma.app/#/Main/SavePalette?name=${encodeURIComponent(\n            props.name\n          )}&colors=${encodeURIComponent(JSON.stringify(props.colors))}`\n      });\n\n      if (result.action === Share.sharedAction) {\n        if (result.activityType) {\n          // shared with activity type of result.activityType\n        } else {\n          // shared\n        }\n      } else if (result.action === Share.dismissedAction) {\n        // dismissed\n      }\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  const onShareWeb = event => {\n    event.preventDefault();\n    event.stopPropagation();\n    Clipboard.setString(\n      `Croma - Palette Manager\\nColors:\\n${props.colors\n        .map(colorObj => colorObj.color)\n        .join(\"\\n\")}\n      \n      https://croma.app/#/Main/SavePalette?name=${encodeURIComponent(\n        props.name\n      )}&colors=${encodeURIComponent(JSON.stringify(props.colors))}`\n    );\n    setShared(true);\n    setTimeout(() => {\n      setShared(false);\n    }, 3000);\n  };\n  return (\n    <Card\n      {...props}\n      onPress={() => {\n        props.navigation.navigate(\"Palette\", props);\n      }}\n      animationType={animationType}\n    >\n      <MultiColorView {...props}></MultiColorView>\n\n      <View style={styles.bottom}>\n        <Text style={styles.label}>{props.name}</Text>\n        <View style={styles.actionButtonsView}>\n          {shared && (\n            <Text\n              style={{\n                position: \"absolute\",\n                backgroundColor: \"rgb(64, 64, 58)\",\n                top: \"-35px\",\n                right: \"-10px\",\n                width: \"148px\",\n                color: \"#fff\",\n                padding: \"5px \",\n                textAlign: \"center\",\n                borderRadius: \"6px\"\n              }}\n            >\n              Copied to Clipboard!\n            </Text>\n          )}\n          {Platform.OS === \"web\" ? (\n            <Touchable onClick={onShareWeb} style={styles.actionButton}>\n              <FontAwesome size={20} name=\"share\" />\n            </Touchable>\n          ) : (\n            <Touchable onPress={onShare} style={styles.actionButton}>\n              <FontAwesome size={20} name=\"share\" />\n            </Touchable>\n          )}\n          <Touchable\n            {...{\n              [Platform.OS === \"web\" ? \"onClick\" : \"onPress\"]: event => {\n                event.preventDefault();\n                event.stopPropagation();\n                setAnimationType(\"fadeOutRightBig\");\n                setTimeout(() => {\n                  deletePaletteByName(props.name);\n                }, 500);\n              }\n            }}\n            style={styles.actionButton}\n          >\n            <FontAwesome size={20} name=\"trash\" />\n          </Touchable>\n        </View>\n      </View>\n    </Card>\n  );\n};\n\nconst styles = StyleSheet.create({\n  bottom: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    padding: 16,\n    height: 54\n  },\n  actionButtonsView: {\n    flexDirection: \"row\",\n    alignItems: \"flex-end\"\n  },\n  actionButton: {\n    padding: 8\n  },\n  label: {\n    flex: 1,\n    marginHorizontal: 16,\n    color: Colors.darkGrey\n  }\n});\n","import kmeans from \"ml-kmeans\";\nimport Jimp from \"jimp\";\nimport Color from \"pigment/full\";\nexport default class ColorPicker {\n  static getProminentColors(image) {\n    /*\n    Jimp.RESIZE_NEAREST_NEIGHBOR;\n    Jimp.RESIZE_BILINEAR;\n    Jimp.RESIZE_BICUBIC;\n    Jimp.RESIZE_HERMITE;\n    Jimp.RESIZE_BEZIER;\n    These does not work with first params.\n    */\n    image.resize(Jimp.AUTO, 100);\n    let data = ColorPicker._prepareDataForKmeans(image);\n    let time = Date.now();\n    let ans = kmeans(data, 24, { initialization: \"random\", maxIterations: 20 });\n    ans.centroids = ans.centroids.sort((c1, c2) => c2.size - c1.size);\n    let kmeansColors = ans.centroids.map(centroid => {\n      return new Color(this._labToHex(centroid.centroid));\n    });\n    return this._getFinalColors(kmeansColors).map(c => {\n      return { color: c.tohex() };\n    });\n  }\n  // original implementation in java: https://github.com/kamalkishor1991/croma/blob/master/src/main/java/org/numixproject/colorextractor/image/KMeansColorPicker.java\n  static _getFinalColors(kmeansColors) {\n    kmeansColors.sort(\n      (c1, c2) => this._toArray(c1.tohsv())[0] < this._toArray(c2.tohsv())[0]\n    );\n    let filteredColors = [];\n    for (let i = 0; i < kmeansColors.length; i += 4) {\n      let colorList = [];\n      for (let j = 0; j < 4; j++) {\n        colorList.push(kmeansColors[i + j]);\n      }\n      colorList.sort(\n        (c1, c2) => this._toArray(c1.tohsv())[1] < this._toArray(c2.tohsv())[1]\n      );\n      filteredColors.push(colorList[colorList.length - 1]);\n      filteredColors.push(colorList[colorList.length - 2]);\n    }\n    let finalColors = [];\n    for (let i = 0; i < filteredColors.length; i += 2) {\n      if (\n        this._toArray(filteredColors[i].tohsv())[2] >\n        this._toArray(filteredColors[i + 1].tohsv())[2]\n      ) {\n        finalColors.push(filteredColors[i]);\n      } else {\n        finalColors.push(filteredColors[i + 1]);\n      }\n    }\n    return finalColors;\n  }\n\n  static _labToHex(lab) {\n    let color = new Color(\n      \"lab(\" + lab[0] + \", \" + lab[1] + \", \" + lab[2] + \")\"\n    );\n    return color.tohex();\n  }\n\n  static _prepareDataForKmeans(image) {\n    let data = [];\n\n    for (let i = 0; i < image.bitmap.width; i++) {\n      for (let j = 0; j < image.bitmap.height; j++) {\n        let intColor = image.getPixelColor(i, j);\n        let hex = this._toHexColor(intColor);\n        let color = new Color(hex);\n        let xyz = color.tolab();\n        // format: \"xyz(19.78527130484015, 8.600439447528947, 95.19796416837329)\" to double array of xyz\n        xyz = xyz\n          .substr(4, xyz.length - 5)\n          .split(\", \")\n          .map(v => parseFloat(v));\n        data.push(xyz);\n      }\n    }\n\n    return data;\n  }\n\n  static _toHexColor(intColor) {\n    let rgba = Jimp.intToRGBA(intColor); // TODO: Need to optimize this once everything else starts working.\n    let color = new Color(\n      \"rgb(\" + rgba.r + \", \" + rgba.g + \", \" + rgba.b + \")\"\n    );\n    return color.tohex();\n  }\n\n  static _toArray(color) {\n    let index = color.indexOf(\"(\");\n    color = color.substr(index + 1, color.length - index);\n    return color.split(\", \").map(c => parseFloat(c));\n  }\n}\n","export default () => {};\n","import React, { useState } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  Clipboard,\n  Platform,\n  ToastAndroid\n} from \"react-native\";\nimport { FontAwesome } from \"@expo/vector-icons\";\n\nimport Touchable from \"react-native-platform-touchable\";\n\nimport Color from \"pigment/full\";\n\nexport function ColorDetail(props) {\n  const [copyiedIndex, setCopyiedIntex] = useState(-1);\n  const styles = StyleSheet.create({\n    backgroundColor: {\n      backgroundColor: props.color,\n      height: 112,\n      alignSelf: \"stretch\"\n    },\n    info: {\n      flexDirection: \"row\",\n      justifyContent: \"space-between\",\n      padding: 10\n    },\n    colorNameText: {\n      fontSize: 16,\n      fontWeight: \"500\"\n    }\n  });\n  const color = new Color(props.color);\n  let items = [\n    { key: \"HEX\", value: color.tohex() },\n    { key: \"RGB\", value: color.torgb() },\n    { key: \"HSL\", value: color.tohsl() },\n    { key: \"HSV\", value: color.tohsv() },\n    { key: \"HWB\", value: color.tohwb() },\n    { key: \"CMYK\", value: color.tocmyk() },\n    { key: \"CIELAB\", value: color.tolab() },\n    { key: \"Luminance\", value: (color.luminance() * 100).toFixed(2) + \"%\" },\n    { key: \"Darkness\", value: (color.darkness() * 100).toFixed(2) + \"%\" }\n  ];\n\n  const debounce = (func, delay) => {\n    let debounceTimer;\n    return function() {\n      const context = this;\n      const args = arguments;\n      clearTimeout(debounceTimer);\n      debounceTimer = setTimeout(() => func.apply(context, args), delay);\n    };\n  };\n  const debouncedSetCopiedIndex = debounce(() => setCopyiedIntex(-1), 2000);\n\n  let writeToClipboard = function(value, index) {\n    if (Platform.OS === \"android\") {\n      ToastAndroid.show(\"Text copied to clipboard!\", ToastAndroid.LONG);\n    }\n    Clipboard.setString(value);\n    setCopyiedIntex(index);\n    debouncedSetCopiedIndex();\n  };\n  return (\n    <View\n      style={{\n        flex: 1,\n        flexDirection: \"column\",\n        padding: 8,\n        backgroundColor: \"#fff\"\n      }}\n    >\n      <View style={[styles.backgroundColor]}></View>\n      {/* <Text {...props} style={[props.style, { fontFamily: 'space-mono' }]} >{props.color}</Text> */}\n      <View style={{ marginTop: 20 }}>\n        {items.map((item, index) => (\n          <Touchable\n            key={item.key}\n            onPress={() => writeToClipboard(item.value, index)}\n          >\n            <View style={styles.info}>\n              <Text style={styles.colorNameText}>{item.key} : </Text>\n\n              <Text>{item.value}</Text>\n              {index === copyiedIndex && Platform.OS === \"web\" && (\n                <Text\n                  style={{\n                    position: \"absolute\",\n                    backgroundColor: \"rgb(64, 64, 58)\",\n                    top: \"-25px\",\n                    right: \"-10px\",\n                    color: \"#fff\",\n                    padding: \"5px\",\n                    textAlign: \"center\",\n                    borderRadius: \"6px\"\n                  }}\n                >\n                  Copied!\n                </Text>\n              )}\n              <FontAwesome name=\"copy\" />\n            </View>\n          </Touchable>\n        ))}\n      </View>\n    </View>\n  );\n}\n","import * as React from \"react\";\nimport { StyleSheet, Text } from \"react-native\";\nimport Touchable from \"react-native-platform-touchable\";\n\nexport default class CromaButton extends React.Component {\n  render() {\n    const { style, onPress, children } = this.props;\n    return (\n      <Touchable style={[styles.button, style]} onPress={onPress}>\n        <Text style={styles.text}> {children} </Text>\n      </Touchable>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    shadowColor: \"rgba(0,0,0, .4)\",\n    shadowOffset: { height: 1, width: 1 },\n    shadowOpacity: 1,\n    shadowRadius: 1,\n    backgroundColor: \"#fff\",\n    elevation: 2,\n    height: 50,\n    marginTop: 10,\n    marginBottom: 10,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  text: {\n    textTransform: \"uppercase\",\n    fontWeight: \"700\",\n    color: \"#484a4c\"\n  }\n});\n","import React from \"react\";\nimport { ScrollView, StyleSheet, Button } from \"react-native\";\nimport { ColorDetail } from \"../components/ColorDetails\";\nimport CromaButton from \"../components/CromaButton\";\n\nexport default function ColorDetailScreen(props) {\n  const color = props.navigation.getParam(\"color\");\n  return (\n    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>\n      <ColorDetail navigation={props.navigation} color={color}>\n        {color}\n      </ColorDetail>\n      <CromaButton\n        onPress={() => props.navigation.navigate(\"Palettes\", { color: color })}\n      >\n        See color palettes\n      </CromaButton>\n    </ScrollView>\n  );\n}\n\nColorDetailScreen.navigationOptions = ({ navigation }) => {\n  return {\n    title: navigation.getParam(\"color\")\n  };\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingLeft: 12,\n    paddingRight: 12\n  }\n});\n","import React, { useState } from \"react\";\nimport { ScrollView, View, StyleSheet } from \"react-native\";\nimport CromaButton from \"../components/CromaButton\";\nimport { CromaColorPicker as ColorPicker } from \"croma-color-picker\";\nexport default function ColorPickerScreen(props) {\n  const [color, setColor] = useState(\"#db0a5b\");\n  return (\n    <ScrollView showsVerticalScrollIndicator={false}>\n      <View style={styles.container}>\n        <ColorPicker\n          onChangeColor={color => {\n            setColor(color);\n          }}\n          style={[{ height: 350, flex: 1 }]}\n        />\n        <CromaButton\n          onPress={() => {\n            props.navigation.goBack();\n            props.navigation.getParam(\"onDone\")({ color: color });\n          }}\n        >\n          Done\n        </CromaButton>\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: \"column\",\n    margin: 8\n  }\n});\n","import * as React from \"react\";\nimport { StyleSheet, View, Text } from \"react-native\";\nimport Card from \"./Card\";\nimport Colors from \"../constants/Colors\";\nimport MultiColorView from \"./MultiColorView\";\n\nexport class PalettePreviewCard extends React.Component {\n  render() {\n    return (\n      <Card {...this.props}>\n        <View>\n          <MultiColorView {...this.props}></MultiColorView>\n          <View style={styles.bottom}>\n            <Text style={styles.label}>{this.props.name}</Text>\n          </View>\n        </View>\n      </Card>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  bottom: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    height: 48\n  },\n  label: {\n    flex: 1,\n    fontWeight: \"500\",\n    marginHorizontal: 16,\n    color: Colors.darkGrey\n  }\n});\n","import React from \"react\";\nimport { ScrollView, StyleSheet, Text } from \"react-native\";\nimport Color from \"pigment/full\";\nimport { PalettePreviewCard } from \"../components/PalettePreviewCard\";\nexport default function PalettesScreen(props) {\n  // Convert camelCase to sentence\n  const parseCamelCase = text => {\n    if (typeof text !== \"string\") {\n      return \"\";\n    }\n    return text\n      .replace(/([a-z])([A-Z])/g, \"$1 $2\")\n      .replace(/\\b([A-Z]+)([A-Z])([a-z])/, \"$1 $2$3\")\n      .replace(/^./, str => str.toUpperCase());\n  };\n  const color = new Color(props.navigation.getParam(\"color\"));\n  let items = [];\n  for (const i in color) {\n    if (/.*scheme$/i.test(i) && typeof color[i] === \"function\") {\n      let colors = [];\n      const paletteColors = color[i]();\n      paletteColors.forEach(c => colors.push({ color: c.tohex() }));\n      items.push(\n        <PalettePreviewCard\n          onPress={() =>\n            props.navigation.navigate(\"ColorList\", { colors: colors })\n          }\n          key={i.toString()}\n          colors={colors}\n          name={parseCamelCase(i.toString())}\n        ></PalettePreviewCard>\n      );\n    }\n  }\n  return (\n    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>\n      {items}\n    </ScrollView>\n  );\n}\n\nPalettesScreen.navigationOptions = ({ navigation }) => {\n  return {\n    title: navigation.getParam(\"color\")\n  };\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingLeft: 12,\n    paddingRight: 12\n  }\n});\n","import React, { useState, useEffect } from \"react\";\nimport { Text, View, StyleSheet, TextInput, Platform } from \"react-native\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport { PalettePreviewCard } from \"../components/PalettePreviewCard\";\nimport Colors from \"../constants/Colors\";\nimport CromaButton from \"../components/CromaButton\";\nimport { Croma } from \"../store/store\";\nimport { TextDialog } from \"./CommanDialogs\";\n\nexport const SavePalette = props => {\n  const [paletteName, setPaletteName] = useState(\n    props.navigation.getParam(\"name\") ? props.navigation.getParam(\"name\") : \"\"\n  );\n  const [finalColors, setFinalColors] = useState([]);\n  const [isUnlockProNotification, setIsUnlockProNotifiction] = useState(false);\n  const [isPaletteNameExist, setIsPaletteNameExist] = React.useState(false);\n  const { addPalette, allPalettes, isPro } = React.useContext(Croma);\n\n  useEffect(() => {\n    let colorsFromParams = props.navigation.getParam(\"colors\");\n    if (typeof colorsFromParams === \"string\") {\n      colorsFromParams = JSON.parse(colorsFromParams);\n    }\n    const colors = [...new Set(colorsFromParams || [])];\n    setIsUnlockProNotifiction(!isPro && colors.length > 4);\n    setFinalColors(colors);\n    setTimeout(() => {\n      setIsUnlockProNotifiction(false);\n    }, 5000);\n  }, []);\n\n  const { title, navigationPath } = props;\n  return (\n    <ScrollView style={{ margin: 8 }} showsVerticalScrollIndicator={false}>\n      <PalettePreviewCard\n        colors={finalColors.slice(0, isPro ? finalColors.length : 4)}\n        name={paletteName}\n      />\n      <View style={styles.card}>\n        <Text style={[styles.label, styles.title]}>{title}</Text>\n        <TextInput\n          style={styles.input}\n          value={paletteName}\n          placeholder=\"Enter a name for the palette\"\n          onChangeText={name => setPaletteName(name)}\n        />\n      </View>\n      <CromaButton\n        onPress={async () => {\n          if (allPalettes[paletteName]) {\n            setIsPaletteNameExist(true);\n            setTimeout(() => {\n              setIsPaletteNameExist(false);\n            }, 3000);\n            return null;\n          }\n          const palette = { name: paletteName, colors: finalColors };\n          addPalette(palette);\n          if (navigationPath === \"Palette\") {\n            props.navigation.replace(navigationPath, palette);\n          } else {\n            props.navigation.navigate(navigationPath);\n          }\n        }}\n      >\n        Save palette\n      </CromaButton>\n      {isPaletteNameExist && (\n        <TextDialog text={\"A palette with same name already exists.\"} />\n      )}\n      {isUnlockProNotification && (\n        <TextDialog text={\"Unlock pro to save more than 4 colors!\"} />\n      )}\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  card: {\n    flex: 1,\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    shadowColor: \"rgba(0,0,0, .4)\",\n    shadowOffset: { height: 1, width: 1 },\n    shadowOpacity: 1,\n    shadowRadius: 1,\n    backgroundColor: \"#fff\",\n    elevation: 2,\n    height: 92,\n    marginVertical: 10,\n    padding: 10\n  },\n  title: {\n    fontWeight: \"700\"\n  },\n  input: {\n    flex: 1,\n    borderBottomColor: \"black\",\n    borderBottomWidth: 1\n  },\n  bottom: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    padding: 16,\n    height: 54\n  },\n  label: {\n    flex: 1,\n    color: Colors.darkGrey\n  }\n});\n","import * as React from \"react\";\nimport { View, StyleSheet, Text } from \"react-native\";\n\nexport class SingleColorView extends React.Component {\n  render() {\n    return (\n      <View style={[styles.container, { backgroundColor: this.props.color }]}>\n        <Text style={styles.colorText}>{this.props.color}</Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 56,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  colorText: {\n    fontWeight: \"700\",\n    backgroundColor: \"rgba(255, 255, 255, .3)\",\n    paddingLeft: 8,\n    paddingRight: 8\n  }\n});\n","import React from \"react\";\nimport { SingleColorView } from \"../components/SingleColorView\";\nimport { ScrollView, StyleSheet } from \"react-native\";\nimport CromaButton from \"../components/CromaButton\";\n\nexport default function ColorListScreen(props) {\n  const colors = uniqueColors(props.navigation.getParam(\"colors\"));\n  return (\n    <ScrollView style={styles.listview} showsVerticalScrollIndicator={false}>\n      {colors.map(color => (\n        <SingleColorView key={color.color} color={color.color} />\n      ))}\n      <CromaButton\n        onPress={() =>\n          props.navigation.navigate(\"SavePalette\", { colors: colors })\n        }\n      >\n        SAVE AS NEW PALETTE\n      </CromaButton>\n    </ScrollView>\n  );\n}\nfunction uniqueColors(colors) {\n  let set = new Set();\n  let uniqueColors = [];\n  colors.forEach(color => {\n    if (!set.has(color.color)) {\n      uniqueColors.push(color);\n    }\n    set.add(color.color);\n  });\n  return uniqueColors;\n}\n\nColorListScreen.navigationOptions = {\n  title: \"Colors\"\n};\n\nconst styles = StyleSheet.create({\n  listview: {\n    margin: 8\n  }\n});\n","import * as React from \"react\";\nimport { StyleSheet, View, Text, Platform } from \"react-native\";\nimport Card from \"./Card\";\nimport Colors from \"../constants/Colors\";\nimport { FontAwesome } from \"@expo/vector-icons\";\nimport Touchable from \"react-native-platform-touchable\";\n\nexport default class SingleColorCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { animationType: \"fadeInLeftBig\" };\n  }\n  render() {\n    return (\n      <Card {...this.props} animationType={this.state.animationType}>\n        <View>\n          <View\n            style={{ backgroundColor: this.props.color, height: 100 }}\n          ></View>\n          <View style={styles.bottom}>\n            <Text style={styles.label}>{this.props.color}</Text>\n            <View style={styles.actionButtonsView}>\n              <Touchable\n                {...{\n                  [Platform.OS === \"web\" ? \"onClick\" : \"onPress\"]: event => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.setState({ animationType: \"fadeOutRightBig\" });\n                    setTimeout(() => {\n                      this.props.colorDeleteFromPalette();\n                    }, 400);\n                  }\n                }}\n                style={styles.actionButton}\n              >\n                <FontAwesome size={20} name=\"trash\" />\n              </Touchable>\n            </View>\n          </View>\n        </View>\n      </Card>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  bottom: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    padding: 16,\n    height: 54\n  },\n  actionButtonsView: {\n    flexDirection: \"row\",\n    alignItems: \"flex-end\"\n  },\n  actionButton: {\n    paddingRight: 16\n  },\n  label: {\n    flex: 1,\n    marginHorizontal: 16,\n    fontWeight: \"500\",\n    color: Colors.darkGrey\n  }\n});\n","import React from \"react\";\n\nimport SingleColorCard from \"../components/SingleColorCard\";\nimport {\n  ScrollView,\n  StyleSheet,\n  View,\n  Dimensions,\n  Platform,\n  ToastAndroid\n} from \"react-native\";\nimport { UndoDialog, DialogContainer } from \"../components/CommanDialogs\";\nimport { Croma } from \"../store/store\";\nimport ActionButton from \"react-native-action-button\";\nimport Colors from \"../constants/Colors\";\nimport { Header } from \"react-navigation\";\nimport EmptyView from \"../components/EmptyView\";\nexport default function PaletteScreen(props) {\n  const { height, width } = Dimensions.get(\"window\");\n  const paletteName = props.navigation.getParam(\"name\");\n  const {\n    isPro,\n    allPalettes,\n    colorDeleteFromPalette,\n    undoColorDeletion,\n    addColorToPalette\n  } = React.useContext(Croma);\n  const colors = allPalettes[paletteName].colors;\n  const deletedColors = allPalettes[paletteName].deletedColors\n    ? allPalettes[paletteName].deletedColors\n    : [];\n\n  const deleteColor = index => {\n    colorDeleteFromPalette(props.navigation.getParam(\"name\"), index);\n  };\n\n  return (\n    <>\n      <View\n        style={(styles.container, { minHeight: height - Header.HEIGHT - 16 })}\n      >\n        <ScrollView\n          style={styles.listview}\n          showsVerticalScrollIndicator={false}\n        >\n          {colors.slice(0, isPro ? colors.length : 4).map((colorObj, index) => {\n            return (\n              <SingleColorCard\n                key={colorObj.color}\n                onPress={() =>\n                  props.navigation.navigate(\"ColorDetails\", {\n                    color: colorObj.color\n                  })\n                }\n                color={colorObj.color}\n                colorDeleteFromPalette={() => {\n                  deleteColor(index);\n                }}\n              ></SingleColorCard>\n            );\n          })}\n          <EmptyView />\n        </ScrollView>\n        <ActionButton\n          offsetY={60}\n          bgColor=\"rgba(68, 68, 68, 0.6)\"\n          hideShadow={Platform.OS === \"web\" ? true : false}\n          fixNativeFeedbackRadius={true}\n          buttonColor={Colors.accent}\n          onPress={() => {\n            if (\n              Platform.OS === \"android\" &&\n              colors.length >= 4 &&\n              isPro === false\n            ) {\n              ToastAndroid.show(\n                \"Unlock pro to add more than 4 colors!\",\n                ToastAndroid.LONG\n              );\n            } else {\n              props.navigation.navigate(\"ColorPicker\", {\n                onDone: color => {\n                  addColorToPalette(paletteName, color);\n                }\n              });\n            }\n          }}\n          style={Platform.OS === \"web\" ? styles.actionButtonWeb : {}}\n        />\n      </View>\n      <DialogContainer>\n        {deletedColors.map(colorObj => (\n          <UndoDialog\n            name={colorObj.color}\n            undoDeletionByName={colorName => {\n              undoColorDeletion(paletteName, colorName);\n            }}\n          />\n        ))}\n      </DialogContainer>\n    </>\n  );\n}\nPaletteScreen.navigationOptions = ({ navigation }) => {\n  return {\n    title: navigation.getParam(\"name\")\n  };\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  listview: {\n    margin: 8\n  },\n  actionButtonWeb: {\n    position: \"fixed\",\n    transform: \"scale(1) rotate(0deg) !important\",\n    right: Math.max((Dimensions.get(\"window\").width - 600) / 2, 0),\n    left: Math.max((Dimensions.get(\"window\").width - 600) / 2, 0)\n  }\n});\n","import React from \"react\";\nimport { Platform, Linking } from \"react-native\";\nimport { createStackNavigator } from \"react-navigation\";\nimport { createAppContainer } from \"react-navigation\";\nimport ColorDetailsScreen from \"../screens/ColorDetailScreen\";\nimport ColorPickerScreen from \"../screens/ColorPickerScreen\";\nimport PalettesScreen from \"../screens/PalettesScreen\";\nimport SavePaletteScreen from \"../screens/SavePaletteScreen\";\nimport AddPaletteManuallyScreen from \"../screens/AddPaletteManuallyScreen\";\nimport ColorListScreen from \"../screens/ColorListScreen\";\nimport PaletteScreen from \"../screens/PaletteScreen\";\nimport HomeScreen from \"../screens/HomeScreen\";\nimport Colors from \"../constants/Colors\";\nimport { Entypo } from \"@expo/vector-icons\";\nimport Touchable from \"react-native-platform-touchable\";\n\nconst config = Platform.select({\n  web: { headerMode: \"screen\" },\n  default: {}\n});\nconst RootStack = createStackNavigator(\n  {\n    ColorDetails: ColorDetailsScreen,\n    ColorPicker: ColorPickerScreen,\n    Palettes: PalettesScreen,\n    SavePalette: SavePaletteScreen,\n    ColorList: ColorListScreen,\n    Palette: PaletteScreen,\n    Home: HomeScreen,\n    AddPaletteManually: AddPaletteManuallyScreen\n  },\n  {\n    initialRouteName: \"Home\",\n    cardStyle: { backgroundColor: \"rgb(242, 242, 242)\" },\n    /* The header config from HomeScreen is now here */\n    defaultNavigationOptions: {\n      headerStyle: {\n        backgroundColor: Colors.primary\n      },\n      headerRight:\n        Platform.OS === \"web\" ? (\n          <>\n            <Touchable\n              style={{ padding: \"5px\" }}\n              onPress={() => {\n                Linking.openURL(\n                  \"https://play.google.com/store/apps/details?id=app.croma\"\n                );\n              }}\n            >\n              <Entypo\n                name=\"google-play\"\n                style={{\n                  fontSize: 25,\n                  height: 25,\n                  color: \"white\"\n                }}\n              />\n            </Touchable>\n            <Touchable\n              style={{ padding: \"5px\", marginRight: \"10px\" }}\n              onPress={() => {\n                Linking.openURL(\"https://github.com/croma-app/croma-react\");\n              }}\n            >\n              <Entypo\n                name=\"github\"\n                style={{\n                  fontSize: 25,\n                  height: 25,\n                  color: \"white\"\n                }}\n              />\n            </Touchable>\n          </>\n        ) : (\n          \"\"\n        ),\n      headerTintColor: \"#fff\"\n    }\n  }\n);\n\nconst AppContainer = createAppContainer(RootStack);\n\nexport default RootStack;\n","import React from \"react\";\nimport { ScrollView } from \"react-native\";\nimport { SavePalette } from \"../components/SavePalette\";\n\nexport default function SavePaletteScreen(props) {\n  return (\n    <ScrollView showsVerticalScrollIndicator={false}>\n      <SavePalette\n        title={\"ADD NEW PALETTE\"}\n        navigationPath={\"Home\"}\n        navigation={props.navigation}\n      />\n    </ScrollView>\n  );\n}\n","import React from \"react\";\nimport { ScrollView } from \"react-native\";\nimport { SavePalette } from \"../components/SavePalette\";\n\nexport default function AddPaletteManuallyScreen(props) {\n  return (\n    <ScrollView showsVerticalScrollIndicator={false}>\n      <SavePalette\n        title={\"ADD PALETTE NAME\"}\n        navigationPath={\"Palette\"}\n        navigation={props.navigation}\n      />\n    </ScrollView>\n  );\n}\n","import { createBrowserApp } from \"@react-navigation/web\";\nimport { createSwitchNavigator } from \"react-navigation\";\n\nimport MainTabNavigator from \"./MainTabNavigator\";\n\nconst switchNavigator = createSwitchNavigator({\n  // You could add another route here for authentication.\n  // Read more at https://reactnavigation.org/docs/en/auth-flow.html\n  Main: MainTabNavigator\n});\nswitchNavigator.path = \"\";\n\nexport default createBrowserApp(switchNavigator, { history: \"hash\" });\n","import React from \"react\";\nimport { Platform } from \"react-native\";\n\nexport default class ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  componentDidCatch(error, info) {\n    if (Platform.OS === \"web\") {\n      window.location = \"/\";\n    }\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n    return this.props.children;\n  }\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Platform, StatusBar, StyleSheet, View } from \"react-native\";\nimport Colors from \"./constants/Colors\";\nimport AppNavigator from \"./navigation/AppNavigator\";\nimport { ActivityIndicator } from \"react-native\";\nimport applicationHook, { initState, Croma } from \"./store/store\";\nimport ErrorBoundary from \"./components/ErrorBoundary\";\n\nexport default function App(props) {\n  const [isPalettesLoaded, setIsPalettesLoaded] = useState(false);\n  const applicationState = applicationHook(initState);\n\n  useEffect(() => {\n    (async () => {\n      await applicationState.loadInitPaletteFromStore();\n      setIsPalettesLoaded(true);\n    })();\n    if (Platform.OS === \"web\") {\n      applicationState.setPurchase({\n        platfrom: \"web\"\n      });\n    }\n  }, []);\n  return !isPalettesLoaded ? (\n    <View style={{ flex: 1, marginTop: \"20%\" }}>\n      <ActivityIndicator size=\"large\" color=\"#ef635f\" animating={true} />\n    </View>\n  ) : (\n    <Croma.Provider value={applicationState}>\n      <ErrorBoundary>\n        <View style={[styles.container]}>\n          <StatusBar\n            barStyle=\"light-content\"\n            // dark-content, light-content and default\n            hidden={false}\n            //To hide statusBar\n            backgroundColor={Colors.primaryDark}\n            //Background color of statusBar only works for Android\n            translucent={false}\n            //allowing light, but not detailed shapes\n            networkActivityIndicatorVisible={true}\n          />\n          <View\n            style={[{ flex: 1, backgroundColor: \"transparent\", maxWidth: 600 }]}\n            className={\"navigation-workplace\"}\n          >\n            {Platform.OS === \"ios\" && <StatusBar barStyle=\"default\" />}\n            <AppNavigator />\n          </View>\n        </View>\n      </ErrorBoundary>\n    </Croma.Provider>\n  );\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    backgroundColor: Colors.backgroundColor,\n    flexDirection: \"row\"\n  }\n});\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","const tintColor = \"#2f95dc\";\n\nexport default {\n  tintColor,\n  tabIconDefault: \"#ccc\",\n  tabIconSelected: tintColor,\n  tabBar: \"#fefefe\",\n  errorBackground: \"red\",\n  errorText: \"#fff\",\n  warningBackground: \"#EAEB5E\",\n  warningText: \"#666804\",\n  noticeBackground: tintColor,\n  noticeText: \"#fff\",\n  primary: \"#f1544d\",\n  primaryDark: \"#c94740\",\n  text: \"#fff\",\n  accent: \"#f0d04c\",\n  grey: \"#888\",\n  darkGrey: \"#333\",\n  lightGrey: \"#eee\",\n  white: \"#fff\",\n  black: \"#000\",\n  fadedBlack: \"rgba(0, 0, 0, .5)\",\n  backgroundColor: \"#f2f2f2\"\n};\n","import { AsyncStorage } from \"react-native\";\nconst APPLICATION_STATE_KEY = \"APLICATION_STATE\";\nconst IS_USER_ALREADY_EXIST_KEY = \"IS_USER_ALREADY_EXIST\";\nexport default class Storage {\n  static getApplicationState = async () => {\n    let state = await AsyncStorage.getItem(APPLICATION_STATE_KEY);\n    if (state) {\n      return JSON.parse(state);\n    } else {\n      return {};\n    }\n  };\n\n  static setApplicationState = async state => {\n    await AsyncStorage.setItem(APPLICATION_STATE_KEY, JSON.stringify(state));\n  };\n\n  static setUserAlreadyExists = async () => {\n    await AsyncStorage.setItem(IS_USER_ALREADY_EXIST_KEY, \"true\");\n  };\n\n  static checkUserAlreadyExists = async () => {\n    return await AsyncStorage.getItem(IS_USER_ALREADY_EXIST_KEY);\n  };\n}\n","import React, { useState } from \"react\";\nimport InAppBilling from \"react-native-billing\";\nimport Storage from \"./../libs/Storage\";\nimport { Platform, ToastAndroid } from \"react-native\";\nconst UNDO_TIMEOUT = 3000;\n\nexport const initState = {\n  allPalettes: {},\n  deletedPalettes: {},\n  isLoading: false,\n  isPro: false\n};\n\nconst syncStateToStore = function(state) {\n  Storage.setApplicationState(state);\n};\n\nconst sortPalette = palette =>\n  palette.colors.sort((a, b) => (a.color > b.color ? 1 : -1));\n\nexport default function applicationHook(initState) {\n  const addPalette = async palette => {\n    setState(state => {\n      const { allPalettes } = state;\n      sortPalette(palette);\n      if (!palette.createdAt) {\n        palette.createdAt = new Date().valueOf();\n      }\n      allPalettes[palette.name] = palette;\n      // sorting palettes before save\n      const allPalettesArray = Object.keys(allPalettes).map(\n        key => allPalettes[key]\n      );\n      allPalettesArray.sort((a, b) => {\n        // Todo - Just a check for old user\n        if (!a.createdAt) {\n          a.createdAt = 0;\n        }\n        if (!b.createdAt) {\n          b.createdAt = 0;\n        }\n        return new Date(b.createdAt) - new Date(a.createdAt);\n      });\n      const ordered = {};\n      allPalettesArray.forEach(function(_palette) {\n        ordered[_palette.name] = _palette;\n      });\n      return { ...state, allPalettes: ordered };\n    });\n  };\n\n  const loadInitPaletteFromStore = async () => {\n    setState(state => ({ ...state, isLoading: true }));\n    // Loading application state from localStorage\n    const _state = await Storage.getApplicationState();\n    setState(state => ({\n      ...state,\n      ..._state,\n      isLoading: false\n    }));\n\n    // Setting default palette when user comming first time\n    let defaultPalettes = {};\n    const isUserAleadyExits = await Storage.checkUserAlreadyExists();\n\n    if (isUserAleadyExits != \"true\") {\n      if (Platform.OS !== \"web\") {\n        try {\n          await InAppBilling.open();\n          // If subscriptions/products are updated server-side you\n          // will have to update cache with loadOwnedPurchasesFromGoogle()\n          await InAppBilling.loadOwnedPurchasesFromGoogle();\n          isPurchased = await InAppBilling.isPurchased(\"croma_pro\");\n          if (isPurchased) {\n            ToastAndroid.show(\n              \"Your purchase restored successfully..\",\n              ToastAndroid.LONG\n            );\n          }\n          setState(state => {\n            return { ...state, isPro: isPurchased };\n          });\n        } catch (err) {\n          ToastAndroid.show(\n            \"Loading purchase detail failed. \" + err,\n            ToastAndroid.LONG\n          );\n        } finally {\n          await InAppBilling.close();\n        }\n      }\n      Storage.setUserAlreadyExists();\n      defaultPalettes = {\n        name: \"Croma example palette\",\n        colors: [\n          { color: \"#f0675f\" },\n          { color: \"#f3d163\" },\n          { color: \"#ebef5c\" },\n          { color: \"#c9ef5b\" }\n        ]\n      };\n      addPalette(defaultPalettes);\n    }\n  };\n\n  const removePaletteFromStateByName = name => {\n    setState(state => {\n      const { deletedPalettes } = state;\n      clearTimeout(deletedPalettes[name][\"timeout\"]);\n      delete deletedPalettes[name];\n      return { ...state, deletedPalettes };\n    });\n  };\n\n  const setPurchase = details => {\n    setState(state => {\n      return { ...state, isPro: true, purchaseDetails: details };\n    });\n  };\n\n  const addColorToPalette = (name, color) => {\n    setState(state => {\n      const { allPalettes } = state;\n      allPalettes[name].colors = allPalettes[name].colors.concat(color);\n      sortPalette(allPalettes[name]);\n      return { ...state, allPalettes };\n    });\n  };\n\n  const deletePaletteByName = async name => {\n    setState(state => {\n      const { allPalettes, deletedPalettes } = state;\n      if (allPalettes[name]) {\n        deletedPalettes[name] = { ...allPalettes[name] };\n        delete allPalettes[name];\n        deletedPalettes[name][\"timeout\"] = setTimeout(() => {\n          removePaletteFromStateByName(name);\n        }, UNDO_TIMEOUT);\n        return { ...state, allPalettes, deletedPalettes };\n      }\n      return { ...state };\n    });\n  };\n\n  const undoDeletionByName = name => {\n    setState(state => {\n      const { deletedPalettes } = state;\n      if (deletedPalettes[name]) {\n        addPalette({ ...deletedPalettes[name] });\n        removePaletteFromStateByName(name);\n      }\n      return { ...state };\n    });\n  };\n\n  const colorDeleteFromPalette = (name, colorIndex) => {\n    setState(state => {\n      const { allPalettes } = state;\n      const deletedColor = allPalettes[name].colors.splice(colorIndex, 1);\n      deletedColor[0][\"timeout\"] = setTimeout(() => {\n        clearDeletedColor(name, deletedColor[0]);\n      }, UNDO_TIMEOUT);\n      if (allPalettes[name].deletedColors) {\n        allPalettes[name].deletedColors.push({ ...deletedColor[0] });\n      } else {\n        allPalettes[name].deletedColors = [...deletedColor];\n      }\n      return { ...state, allPalettes };\n    });\n  };\n\n  const undoColorDeletion = (name, colorName) => {\n    setState(state => {\n      const { allPalettes } = state;\n      allPalettes[name].colors.push({ color: colorName });\n      allPalettes[name].deletedColors.forEach((color, index) => {\n        if (color.color === colorName) {\n          clearTimeout(color.timeout);\n          allPalettes[name].deletedColors.splice(index, 1);\n        }\n      });\n      sortPalette(allPalettes[name]);\n      return { ...state, allPalettes };\n    });\n  };\n\n  const clearDeletedColor = (name, colorObj) => {\n    setState(state => {\n      const { allPalettes } = state;\n      allPalettes[name].deletedColors.forEach((color, index) => {\n        if (color.color === colorObj.color) {\n          allPalettes[name].deletedColors.splice(index, 1);\n        }\n      });\n      clearTimeout(colorObj.timeout);\n      return { ...state, allPalettes };\n    });\n  };\n\n  const [state, setState] = useState({\n    ...initState,\n    loadInitPaletteFromStore,\n    undoDeletionByName,\n    deletePaletteByName,\n    addPalette,\n    colorDeleteFromPalette,\n    undoColorDeletion,\n    addColorToPalette,\n    setPurchase\n  });\n\n  // Sync state to local storage\n  if (\n    Object.keys(state.allPalettes).length !== 0 ||\n    Object.keys(state.deletedPalettes).length !== 0 ||\n    state.isPro !== initState.isPro\n  ) {\n    syncStateToStore(state);\n  }\n  return state;\n}\n\nexport const Croma = React.createContext();\n","import React from \"react\";\nimport * as Animatable from \"react-native-animatable\";\nimport { View, Text, StyleSheet, Platform, Dimensions } from \"react-native\";\nimport Touchable from \"react-native-platform-touchable\";\n\nexport const DialogContainer = props => (\n  <View\n    style={\n      Platform.OS === \"web\" ? styles.DailogContainerWeb : styles.DailogContainer\n    }\n  >\n    {props.children}\n  </View>\n);\n\nexport const UndoDialog = props => {\n  /*\n    Todo - need to add deletion based on type \n  */\n  const { name, undoDeletionByName } = props;\n  return (\n    <Animatable.View\n      animation={\"fadeInUpBig\"}\n      duration={500}\n      style={[styles.undoCard, styles.marginAndRadius]}\n      useNativeDriver={true}\n    >\n      <View>\n        <Text style={styles.undoText}>Deleted {name}. </Text>\n      </View>\n      <Touchable\n        onPress={event => {\n          event.stopPropagation();\n          event.preventDefault();\n          undoDeletionByName(name);\n        }}\n      >\n        <Text style={styles.undoButton}> UNDO </Text>\n      </Touchable>\n    </Animatable.View>\n  );\n};\n\nexport const TextDialog = props => (\n  <Animatable.View\n    animation={\"fadeInUp\"}\n    duration={500}\n    useNativeDriver={true}\n    style={styles.undoCard}\n  >\n    <View>\n      <Text style={styles.undoText}>{props.text}</Text>\n    </View>\n  </Animatable.View>\n);\n\nconst styles = StyleSheet.create({\n  undoCard: {\n    backgroundColor: \"#303036\",\n    padding: 15,\n    flexDirection: \"row\",\n    display: \"flex\",\n    justifyContent: \"space-between\"\n  },\n  marginAndRadius: {\n    margin: 2,\n    borderRadius: 6\n  },\n  undoText: {\n    color: \"#fff\",\n    fontSize: 15\n  },\n  undoButton: {\n    fontWeight: \"bold\",\n    color: \"#e6be0b\",\n    fontSize: 15\n  },\n  DailogContainerWeb: {\n    position: \"fixed\",\n    bottom: 0,\n    left: 0,\n    width: Math.min(Dimensions.get(\"window\").width, 400) - 10,\n    margin: 5,\n    zIndex: 10\n  },\n  DailogContainer: {\n    position: \"absolute\",\n    bottom: 0,\n    width: \"100%\",\n    zIndex: 10\n  }\n});\n"],"sourceRoot":""}