{"version":3,"sources":["/home/runner/work/croma-react/croma-react/components/Card.js","/home/runner/work/croma-react/croma-react/components/MultiColorView.js","/home/runner/work/croma-react/croma-react/components/EmptyView.js","/home/runner/work/croma-react/croma-react/screens/HomeScreen.js","/home/runner/work/croma-react/croma-react/components/PaletteCard.js","/home/runner/work/croma-react/croma-react/libs/ColorPicker.js","/home/runner/work/croma-react/croma-react/libs/ShareMenu.web.js","/home/runner/work/croma-react/croma-react/components/ColorDetails.js","/home/runner/work/croma-react/croma-react/components/CromaButton.js","/home/runner/work/croma-react/croma-react/screens/ColorDetailScreen.js","/home/runner/work/croma-react/croma-react/screens/ColorPickerScreen.js","/home/runner/work/croma-react/croma-react/components/PalettePreviewCard.js","/home/runner/work/croma-react/croma-react/screens/PalettesScreen.js","/home/runner/work/croma-react/croma-react/components/SavePalette.js","/home/runner/work/croma-react/croma-react/components/SingleColorView.js","/home/runner/work/croma-react/croma-react/screens/ColorListScreen.js","/home/runner/work/croma-react/croma-react/components/SingleColorCard.js","/home/runner/work/croma-react/croma-react/screens/PaletteScreen.js","/home/runner/work/croma-react/croma-react/navigation/MainTabNavigator.js","/home/runner/work/croma-react/croma-react/screens/SavePaletteScreen.js","/home/runner/work/croma-react/croma-react/screens/AddPaletteManuallyScreen.js","/home/runner/work/croma-react/croma-react/navigation/AppNavigator.web.js","/home/runner/work/croma-react/croma-react/components/ErrorBoundary.js","/home/runner/work/croma-react/croma-react/App.js","/home/runner/work/croma-react/croma-react/web-build/register-service-worker.js","/home/runner/work/croma-react/croma-react/constants/Colors.js","/home/runner/work/croma-react/croma-react/libs/Storage.js","/home/runner/work/croma-react/croma-react/store/store.js","/home/runner/work/croma-react/croma-react/components/CommanDialogs.js"],"names":["Card","animation","this","props","animationType","duration","useNativeDriver","Platform","OS","onClick","onPress","style","styles","inner","boxShadow","children","React","StyleSheet","create","backgroundColor","Colors","white","marginVertical","elevation","MultiColorView","palette","alignItems","flexDirection","height","color","flex","colors","map","item","key","EmptyView","HomeScreen","Dimensions","get","width","useContext","Croma","isLoading","allPalettes","deletedPalettes","undoDeletionByName","isPro","setPurchase","useState","pickImgloading","setPickImgLoading","pickImageResult","base64","a","async","ImagePicker","mediaTypes","All","quality","useEffect","Constants","platform","ios","Permissions","status","alert","getPermissionAsync","Linking","getInitialURL","then","url","result","split","forEach","part","decodeURIComponent","navigation","navigate","Set","JSON","parse","name","ShareMenu","getSharedText","text","Color","i","l","length","tohex","toLowerCase","container","minHeight","Header","HEIGHT","showsVerticalScrollIndicator","Object","keys","slice","bgColor","hideShadow","buttonColor","accent","offsetY","spacing","fixNativeFeedbackRadius","actionButtonWeb","Item","title","NativeModules","CromaModule","navigateToColorPicker","pickedColors","console","log","actionButtonIcon","err","pickTopColorsFromImage","uri","ToastAndroid","show","LONG","undefined","Jimp","read","Buffer","pickImage","image","ColorPicker","getProminentColors","catch","onDone","primary","openURL","InAppBilling","open","purchase","details","close","navigationOptions","margin","justifyContent","fontSize","position","transform","right","Math","max","left","PaletteCard","shared","setShared","deletePaletteByName","setAnimationType","bottom","label","actionButtonsView","top","padding","textAlign","borderRadius","event","preventDefault","stopPropagation","Clipboard","setString","colorObj","join","encodeURIComponent","stringify","setTimeout","actionButton","size","Share","share","message","action","sharedAction","activityType","dismissedAction","marginHorizontal","darkGrey","resize","AUTO","data","_prepareDataForKmeans","ans","Date","now","kmeans","initialization","maxIterations","centroids","sort","c1","c2","kmeansColors","centroid","_labToHex","_getFinalColors","c","_toArray","tohsv","filteredColors","colorList","j","push","finalColors","lab","bitmap","intColor","getPixelColor","hex","_toHexColor","xyz","tolab","substr","v","parseFloat","rgba","intToRGBA","r","g","b","index","indexOf","ColorDetail","copyiedIndex","setCopyiedIntex","alignSelf","info","colorNameText","fontWeight","items","value","torgb","tohsl","tohwb","tocmyk","luminance","toFixed","darkness","debouncedSetCopiedIndex","func","delay","debounceTimer","context","args","arguments","clearTimeout","apply","debounce","View","marginTop","writeToClipboard","Text","FontAwesome","CromaButton","button","shadowColor","shadowOffset","shadowOpacity","shadowRadius","marginBottom","textTransform","ColorDetailScreen","getParam","ScrollView","paddingLeft","paddingRight","PalettePreviewCard","PalettesScreen","test","toString","replace","str","toUpperCase","SavePalette","paletteName","setPaletteName","setFinalColors","isUnlockProNotification","setIsUnlockProNotifiction","isPaletteNameExist","setIsPaletteNameExist","addPalette","colorsFromParams","navigationPath","card","TextInput","input","placeholder","onChangeText","borderBottomColor","borderBottomWidth","SingleColorView","colorText","ColorListScreen","set","uniqueColors","has","add","listview","SingleColorCard","state","setState","colorDeleteFromPalette","PaletteScreen","undoColorDeletion","addColorToPalette","deletedColors","deleteColor","ActionButton","colorName","RootStack","select","web","headerMode","default","createStackNavigator","ColorDetails","ColorDetailsScreen","setColor","onChangeColor","goBack","Palettes","ColorList","Palette","Home","AddPaletteManually","initialRouteName","cardStyle","defaultNavigationOptions","headerStyle","headerRight","Entypo","marginRight","headerTintColor","createAppContainer","switchNavigator","createSwitchNavigator","Main","MainTabNavigator","path","createBrowserApp","history","ErrorBoundary","hasError","error","window","location","Component","App","isPalettesLoaded","setIsPalettesLoaded","applicationState","applicationHook","initState","loadInitPaletteFromStore","platfrom","Provider","StatusBar","barStyle","hidden","primaryDark","translucent","networkActivityIndicatorVisible","maxWidth","className","ActivityIndicator","animating","navigator","addEventListener","serviceWorker","register","scope","tintColor","tabIconDefault","tabIconSelected","tabBar","errorBackground","errorText","warningBackground","warningText","noticeBackground","noticeText","grey","lightGrey","black","fadedBlack","Storage","getApplicationState","AsyncStorage","getItem","setApplicationState","setItem","setUserAlreadyExists","checkUserAlreadyExists","sortPalette","createdAt","valueOf","allPalettesArray","ordered","_palette","removePaletteFromStateByName","clearDeletedColor","splice","timeout","_state","loadOwnedPurchasesFromGoogle","isPurchased","colorIndex","deletedColor","concat","purchaseDetails","syncStateToStore","createContext","DialogContainer","DailogContainerWeb","DailogContainer","UndoDialog","undoCard","marginAndRadius","undoText","undoButton","TextDialog","display","min","zIndex"],"mappings":"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","file":"static/js/app.aecb68d4.chunk.js","sourcesContent":["import * as React from \"react\";\nimport * as Animatable from 'react-native-animatable';\nimport { StyleSheet, Platform, View } from \"react-native\";\nimport Colors from \"../constants/Colors\";\nimport Touchable from \"react-native-platform-touchable\";\n\nexport default class Card extends React.Component {\n  render() {\n    return (\n      <Animatable.View animation={this.props.animationType} duration={500} useNativeDriver={true}>\n        <Touchable\n          {...(Platform.OS === \"web\"\n            ? {\n              // When scrolling the document body, the touchables might be triggered\n              // see  https://github.com/necolas/react-native-web/issues/1219\n              onClick: this.props.onPress\n            }\n            : {\n              onPress: this.props.onPress\n            })}\n          style={[styles.inner, Platform.OS === 'web' ? { boxShadow: '0px 1px 4px #888888' } : {}]}\n        >\n          <View {...this.props}>{this.props.children}</View>\n        </Touchable>\n      </Animatable.View>\n    );\n  }\n} \n\nconst styles = StyleSheet.create({\n  inner: {\n    backgroundColor: Colors.white,\n    marginVertical: 8,\n    elevation: 1\n  }\n});\n","import * as React from \"react\";\nimport { StyleSheet, View, Text } from \"react-native\";\nexport default function MultiColorView(props) {\n  const styles = StyleSheet.create({\n    palette: {\n      alignItems: \"stretch\",\n      flexDirection: \"row\",\n      height: 112\n    },\n    color: {\n      flex: 1\n    }\n  });\n  return (\n    <View style={styles.palette}>\n      {props.colors &&\n        props.colors.map(item => (\n          <View\n            style={[styles.color, { backgroundColor: item.color }]}\n            key={item.color}\n          />\n        ))}\n    </View>\n  );\n}\n","import * as React from \"react\";\nimport { View } from \"react-native\";\n\nconst EmptyView = () => <View style={{ height: 100 }}></View>;\n\nexport default EmptyView;\n","import React, { useEffect, useState } from \"react\";\nimport Color from \"pigment/full\";\nimport {\n  ScrollView,\n  StyleSheet,\n  ActivityIndicator,\n  View,\n  Dimensions,\n  Platform,\n  Linking,\n  ToastAndroid,\n  NativeModules\n} from \"react-native\";\nimport { PaletteCard } from \"../components/PaletteCard\";\nimport { UndoDialog, DialogContainer } from \"../components/CommanDialogs\";\nimport { Croma } from \"../store/store\";\nimport Colors from \"../constants/Colors\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport Constants from \"expo-constants\";\nimport * as Permissions from \"expo-permissions\";\nimport ColorPicker from \"../libs/ColorPicker\";\nimport Jimp from \"jimp\";\nimport { Header } from \"react-navigation\";\nimport EmptyView from \"../components/EmptyView\";\nimport ActionButton from \"react-native-action-button\";\nimport { Ionicons, Entypo } from \"@expo/vector-icons\";\nimport InAppBilling from \"react-native-billing\";\nimport ShareMenu from '../libs/ShareMenu';\n\n\nconst HomeScreen = function (props) {\n  const { height, width } = Dimensions.get(\"window\");\n\n  const {\n    isLoading,\n    allPalettes,\n    deletedPalettes,\n    undoDeletionByName,\n    isPro,\n    setPurchase\n  } = React.useContext(Croma);\n  const [pickImgloading, setPickImgLoading] = useState(false);\n  const pickImageResult = async (base64) => {\n    return await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      quality: 1,\n      base64: base64\n    });\n    \n  }\n  const pickImage = async () => {\n    let result = await pickImageResult(true);\n    if (result.base64 !== undefined) {\n      return await Jimp.read(new Buffer(result.base64, \"base64\"));\n    } else {\n      return await Jimp.read(result.uri);\n    }\n  };\n  const getPermissionAsync = async () => {\n    if (Constants.platform.ios) {\n      const { status } = await Permissions.askAsync(Permissions.CAMERA_ROLL);\n      if (status !== \"granted\") {\n        alert(\"Sorry, we need camera roll permissions to make this work!\");\n      }\n    }\n  };\n  const purchase = async function () {\n    try {\n      await InAppBilling.open();\n      const details = await InAppBilling.purchase(\"croma_pro\");\n      ToastAndroid.show(\"Congrats, You are now a pro user!\", ToastAndroid.LONG);\n      setPurchase(details);\n    } catch (err) {\n      ToastAndroid.show(\"Purchase unsucceessful \" + err, ToastAndroid.LONG);\n    } finally {\n      await InAppBilling.close();\n    }\n  };\n  useEffect(() => {\n    getPermissionAsync();\n    if (Platform.OS === 'android') {\n      // Deep linking code \n      // https://medium.com/react-native-training/deep-linking-your-react-native-app-d87c39a1ad5e\n      Linking.getInitialURL().then(url => {\n        if (url) {\n          const result = {};\n          url.split(\"?\")[1].split(\"&\").forEach(function (part) {\n            var item = part.split(\"=\");\n            result[item[0]] = decodeURIComponent(item[1]);\n          });\n          props.navigation.navigate('SavePalette', { colors: [...new Set(JSON.parse(result['colors']) || [])], name: result['name'] });\n        }\n      });\n\n      ShareMenu.getSharedText((text) => {\n        if (text && typeof text === 'string') {\n          const colors = Color.parse(text);\n          for (var i = 0, l = colors.length; i < l; i++) {\n            colors[i] = { color: colors[i].tohex().toLowerCase() };\n          }\n          props.navigation.navigate('SavePalette', { colors });\n        }\n      })\n    }\n  }, []);\n  if (isLoading) {\n    return <ActivityIndicator />;\n  } else {\n    return (\n      <>\n        <View\n          style={[styles.container, { minHeight: height - Header.HEIGHT - 16 }]}\n        >\n          {pickImgloading ? <ActivityIndicator /> : <View />}\n          <ScrollView showsVerticalScrollIndicator={false}>\n            {Object.keys(allPalettes).map(name => {\n              return (\n                <PaletteCard\n                  key={name}\n                  colors={allPalettes[name].colors.slice(\n                    0,\n                    isPro ? allPalettes[name].colors.length : 4\n                  )}\n                  name={name}\n                  navigation={props.navigation}\n                />\n              );\n            })}\n            <EmptyView />\n          </ScrollView>\n        </View>\n\n        <DialogContainer>\n          {Object.keys(deletedPalettes).map(name => {\n            return (\n              <UndoDialog\n                key={name}\n                name={name}\n                undoDeletionByName={undoDeletionByName}\n              />\n            );\n          })}\n        </DialogContainer>\n        {/*Setting box shadow to false because of Issue on the web: https://github.com/mastermoo/react-native-action-button/issues/337 */}\n        <ActionButton\n          bgColor=\"rgba(68, 68, 68, 0.6)\"\n          hideShadow={Platform.OS === \"web\" ? true : false}\n          buttonColor={Colors.accent}\n          offsetY={60}\n          spacing={15}\n          key=\"action-button-home\"\n          fixNativeFeedbackRadius={true}\n          style={Platform.OS === 'web' ? styles.actionButtonWeb : {}}\n        >\n          {Platform.OS === 'android' && <ActionButton.Item\n            buttonColor=\"#60f0af\"\n            title=\"Pick colors from camera\"\n            onPress={() => {\n              NativeModules.CromaModule.navigateToColorPicker((pickedColors) => {\n                console.log(\"Picked colors: \", pickedColors);\n                props.navigation.navigate(\"ColorList\", JSON.parse(pickedColors));\n              });\n            }}\n          >\n            <Ionicons name=\"md-camera\" style={styles.actionButtonIcon} />\n          </ActionButton.Item>\n          }\n          <ActionButton.Item\n            buttonColor=\"#9b59b6\"\n            title=\"Get palette from image\"\n            onPress={() => {\n              setPickImgLoading(true);\n              if (Platform.OS === 'android') {\n                pickImageResult().then((result, err) =>{\n                  NativeModules.CromaModule.pickTopColorsFromImage(result.uri, (err, pickedColors) => {\n                    if (err) {\n                      ToastAndroid.show(\"Error while processing image: \" + err, ToastAndroid.LONG);\n                    } else {\n                      console.log(\"Picked colors: \", pickedColors);\n                      props.navigation.navigate(\"ColorList\", JSON.parse(pickedColors));\n                    }\n                    setPickImgLoading(false);\n                  });\n                });\n              } else {\n                pickImage()\n                  .then((image, err) => {\n                    setPickImgLoading(false);\n                    props.navigation.navigate(\"ColorList\", {\n                      colors: ColorPicker.getProminentColors(image)\n                    });\n                  })\n                  .catch(err => {\n                    if (Platform.OS == 'android') {\n                      ToastAndroid.show(\"Error while processing image: \" + err, ToastAndroid.LONG);\n                    }\n                    setPickImgLoading(false);\n                  });\n                }\n            }}\n          >\n            <Ionicons name=\"md-image\" style={styles.actionButtonIcon} />\n          </ActionButton.Item>\n          <ActionButton.Item\n            buttonColor=\"#3498db\"\n            title=\"Get palette from color\"\n            onPress={() => {\n              props.navigation.navigate(\"ColorPicker\", {\n                onDone: color => {\n                  props.navigation.navigate(\"Palettes\", {\n                    color: color.color\n                  });\n                }\n              });\n            }}\n          >\n            <Ionicons name=\"md-color-palette\" style={styles.actionButtonIcon} />\n          </ActionButton.Item>\n          <ActionButton.Item\n            buttonColor=\"#1abc9c\"\n            title=\"Add colors manually\"\n            onPress={() => props.navigation.navigate(\"AddPaletteManually\")}\n          >\n            <Ionicons name=\"md-color-filter\" style={styles.actionButtonIcon} />\n          </ActionButton.Item>\n          {Platform.OS === \"web\" && (\n            <ActionButton.Item\n              buttonColor={Colors.primary}\n              title=\"Get croma on playstore\"\n              onPress={() =>\n                Linking.openURL(\n                  \"https://play.google.com/store/apps/details?id=app.croma\"\n                )\n              }\n            >\n              <Entypo name=\"google-play\" style={styles.actionButtonIcon} />\n            </ActionButton.Item>\n          )}\n          {Platform.OS === \"android\" && !isPro && (\n            <ActionButton.Item\n              buttonColor={Colors.primary}\n              title=\"Unlock pro\"\n              onPress={() => {\n                purchase();\n              }}\n            >\n              <Ionicons name=\"md-unlock\" style={styles.actionButtonIcon} />\n            </ActionButton.Item>\n          )}\n        </ActionButton>\n      </>\n    );\n  }\n};\n\nexport default HomeScreen;\n\nHomeScreen.navigationOptions = {\n  title: \"Croma\"\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    margin: 8,\n    justifyContent: \"center\"\n  },\n  actionButtonIcon: {\n    fontSize: 20,\n    height: 22,\n    color: \"white\"\n  },\n  actionButtonWeb: {\n    position: 'fixed',\n    transform: 'scale(1) rotate(0deg) !important',\n    right: Math.max((Dimensions.get(\"window\").width - 600) / 2, 0),\n    left: Math.max((Dimensions.get(\"window\").width - 600) / 2, 0)\n  }\n});\n","import * as React from \"react\";\nimport { StyleSheet, View, Text, Platform, Clipboard } from \"react-native\";\nimport Card from \"./Card\";\nimport Colors from \"../constants/Colors\";\nimport { Share } from \"react-native\";\n\nimport MultiColorView from \"./MultiColorView\";\nimport { FontAwesome } from \"@expo/vector-icons\";\nimport Touchable from \"react-native-platform-touchable\";\nimport { Croma } from \"../store/store\";\n\nexport const PaletteCard = props => {\n  const [shared, setShared] = React.useState(false);\n  const { deletePaletteByName } = React.useContext(Croma);\n  const [ animationType, setAnimationType ] = React.useState('fadeInLeftBig');\n  const onShare = async () => {\n    try {\n      const result = await Share.share(\n        {\n          message: `Croma - Palette Manager\\nColors:\\n${props.colors.map((colorObj) => colorObj.color).join('\\n')}\n      \n          https://croma.app/#/Main/SavePalette?name=${\n          encodeURIComponent(props.name)\n          }&colors=${encodeURIComponent(JSON.stringify(props.colors))}`\n        }\n      );\n\n      if (result.action === Share.sharedAction) {\n        if (result.activityType) {\n          // shared with activity type of result.activityType\n        } else {\n          // shared\n        }\n      } else if (result.action === Share.dismissedAction) {\n        // dismissed\n      }\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  const onShareWeb = event => {\n    event.preventDefault();\n    event.stopPropagation();\n    Clipboard.setString(\n      `Croma - Palette Manager\\nColors:\\n${props.colors.map((colorObj) => colorObj.color).join('\\n')}\n      \n      https://croma.app/#/Main/SavePalette?name=${\n      encodeURIComponent(props.name)\n      }&colors=${encodeURIComponent(JSON.stringify(props.colors))}`\n    );\n    setShared(true);\n    setTimeout(() => {\n      setShared(false);\n    }, 3000);\n  };\n  return (\n    <Card\n      {...props}\n      onPress={() => {\n        props.navigation.navigate(\"Palette\", props);\n      }}\n      animationType={animationType} \n    >\n      <MultiColorView {...props}></MultiColorView>\n\n      <View style={styles.bottom}>\n        <Text style={styles.label}>{props.name}</Text>\n        <View style={styles.actionButtonsView}>\n          {shared && (\n            <Text\n              style={{\n                position: \"absolute\",\n                backgroundColor: \"rgb(64, 64, 58)\",\n                top: \"-35px\",\n                right: \"-10px\",\n                width: \"148px\",\n                color: \"#fff\",\n                padding: \"5px \",\n                textAlign: \"center\",\n                borderRadius: \"6px\"\n              }}\n            >\n              Copied to Clipboard!\n            </Text>\n          )}\n          {Platform.OS === \"web\" ? (\n            <Touchable onClick={onShareWeb} style={styles.actionButton}>\n              <FontAwesome size={20} name=\"share\" />\n            </Touchable>\n          ) : (\n              <Touchable onPress={onShare} style={styles.actionButton}>\n                <FontAwesome size={20} name=\"share\" />\n              </Touchable>\n            )}\n          <Touchable\n            {...{[Platform.OS === 'web' ? 'onClick': 'onPress' ]: event => {\n              event.preventDefault();\n              event.stopPropagation();\n              setAnimationType('fadeOutRightBig');\n              setTimeout(()=>{\n                deletePaletteByName(props.name);\n              }, 500)\n            }}}\n            style={styles.actionButton}\n          >\n            <FontAwesome size={20} name=\"trash\" />\n          </Touchable>\n        </View>\n      </View>\n    </Card>\n  );\n};\n\nconst styles = StyleSheet.create({\n  bottom: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    padding: 16,\n    height: 54\n  },\n  actionButtonsView: {\n    flexDirection: \"row\",\n    alignItems: \"flex-end\"\n  },\n  actionButton: {\n    padding: 8\n  },\n  label: {\n    flex: 1,\n    marginHorizontal: 16,\n    color: Colors.darkGrey\n  }\n});\n","import kmeans from \"ml-kmeans\";\nimport Jimp from \"jimp\";\nimport Color from \"pigment/full\";\nexport default class ColorPicker {\n  static getProminentColors(image) {\n    /*\n    Jimp.RESIZE_NEAREST_NEIGHBOR;\n    Jimp.RESIZE_BILINEAR;\n    Jimp.RESIZE_BICUBIC;\n    Jimp.RESIZE_HERMITE;\n    Jimp.RESIZE_BEZIER;\n    These does not work with first params.\n    */\n    image.resize(Jimp.AUTO, 100);\n    let data = ColorPicker._prepareDataForKmeans(image);\n    let time = Date.now();\n    let ans = kmeans(data, 24, { initialization: \"random\", maxIterations: 20 });\n    ans.centroids = ans.centroids.sort((c1, c2) => c2.size - c1.size);\n    let kmeansColors = ans.centroids.map(centroid => {\n      return new Color(this._labToHex(centroid.centroid));\n    });\n    return this._getFinalColors(kmeansColors).map(c => {\n      return { color: c.tohex() };\n    });\n  }\n  // original implementation in java: https://github.com/kamalkishor1991/croma/blob/master/src/main/java/org/numixproject/colorextractor/image/KMeansColorPicker.java\n  static _getFinalColors(kmeansColors) {\n    kmeansColors.sort(\n      (c1, c2) => this._toArray(c1.tohsv())[0] < this._toArray(c2.tohsv())[0]\n    );\n    let filteredColors = [];\n    for (let i = 0; i < kmeansColors.length; i += 4) {\n      let colorList = [];\n      for (let j = 0; j < 4; j++) {\n        colorList.push(kmeansColors[i + j]);\n      }\n      colorList.sort(\n        (c1, c2) => this._toArray(c1.tohsv())[1] < this._toArray(c2.tohsv())[1]\n      );\n      filteredColors.push(colorList[colorList.length - 1]);\n      filteredColors.push(colorList[colorList.length - 2]);\n    }\n    let finalColors = [];\n    for (let i = 0; i < filteredColors.length; i += 2) {\n      if (\n        this._toArray(filteredColors[i].tohsv())[2] >\n        this._toArray(filteredColors[i + 1].tohsv())[2]\n      ) {\n        finalColors.push(filteredColors[i]);\n      } else {\n        finalColors.push(filteredColors[i + 1]);\n      }\n    }\n    return finalColors;\n  }\n\n  static _labToHex(lab) {\n    let color = new Color(\n      \"lab(\" + lab[0] + \", \" + lab[1] + \", \" + lab[2] + \")\"\n    );\n    return color.tohex();\n  }\n\n  static _prepareDataForKmeans(image) {\n    let data = [];\n\n    for (let i = 0; i < image.bitmap.width; i++) {\n      for (let j = 0; j < image.bitmap.height; j++) {\n        let intColor = image.getPixelColor(i, j);\n        let hex = this._toHexColor(intColor);\n        let color = new Color(hex);\n        let xyz = color.tolab();\n        // format: \"xyz(19.78527130484015, 8.600439447528947, 95.19796416837329)\" to double array of xyz\n        xyz = xyz\n          .substr(4, xyz.length - 5)\n          .split(\", \")\n          .map(v => parseFloat(v));\n        data.push(xyz);\n      }\n    }\n\n    return data;\n  }\n\n  static _toHexColor(intColor) {\n    let rgba = Jimp.intToRGBA(intColor); // TODO: Need to optimize this once everything else starts working.\n    let color = new Color(\n      \"rgb(\" + rgba.r + \", \" + rgba.g + \", \" + rgba.b + \")\"\n    );\n    return color.tohex();\n  }\n\n  static _toArray(color) {\n    let index = color.indexOf(\"(\");\n    color = color.substr(index + 1, color.length - index);\n    return color.split(\", \").map(c => parseFloat(c));\n  }\n}\n","export default ()=>{}","import React, { useState } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  Clipboard,\n  Platform,\n  ToastAndroid\n} from \"react-native\";\nimport { FontAwesome } from \"@expo/vector-icons\";\n\nimport Touchable from \"react-native-platform-touchable\";\n\nimport Color from \"pigment/full\";\n\nexport function ColorDetail(props) {\n  const [copyiedIndex, setCopyiedIntex] = useState(-1);\n  const styles = StyleSheet.create({\n    backgroundColor: {\n      backgroundColor: props.color,\n      height: 112,\n      alignSelf: \"stretch\"\n    },\n    info: {\n      flexDirection: \"row\",\n      justifyContent: \"space-between\",\n      padding: 10\n    },\n    colorNameText: {\n      fontSize: 16,\n      fontWeight: \"500\"\n    }\n  });\n  const color = new Color(props.color);\n  let items = [\n    { key: \"HEX\", value: color.tohex() },\n    { key: \"RGB\", value: color.torgb() },\n    { key: \"HSL\", value: color.tohsl() },\n    { key: \"HSV\", value: color.tohsv() },\n    { key: \"HWB\", value: color.tohwb() },\n    { key: \"CMYK\", value: color.tocmyk() },\n    { key: \"CIELAB\", value: color.tolab() },\n    { key: \"Luminance\", value: (color.luminance() * 100).toFixed(2) + \"%\" },\n    { key: \"Darkness\", value: (color.darkness() * 100).toFixed(2) + \"%\" }\n  ];\n\n  const debounce = (func, delay) => {\n    let debounceTimer;\n    return function() {\n      const context = this;\n      const args = arguments;\n      clearTimeout(debounceTimer);\n      debounceTimer = setTimeout(() => func.apply(context, args), delay);\n    };\n  };\n  const debouncedSetCopiedIndex = debounce(() => setCopyiedIntex(-1), 2000);\n\n  let writeToClipboard = function(value, index) {\n    if (Platform.OS === \"android\") {\n      ToastAndroid.show(\"Text copied to clipboard!\", ToastAndroid.LONG);\n    }\n    Clipboard.setString(value);\n    setCopyiedIntex(index);\n    debouncedSetCopiedIndex();\n  };\n  return (\n    <View\n      style={{\n        flex: 1,\n        flexDirection: \"column\",\n        padding: 8,\n        backgroundColor: \"#fff\"\n      }}\n    >\n      <View style={[styles.backgroundColor]}></View>\n      {/* <Text {...props} style={[props.style, { fontFamily: 'space-mono' }]} >{props.color}</Text> */}\n      <View style={{ marginTop: 20 }}>\n        {items.map((item, index) => (\n          <Touchable\n            key={item.key}\n            onPress={() => writeToClipboard(item.value, index)}\n          >\n            <View style={styles.info}>\n              <Text style={styles.colorNameText}>{item.key} : </Text>\n\n              <Text>{item.value}</Text>\n              {index === copyiedIndex && Platform.OS === \"web\" && (\n                <Text\n                  style={{\n                    position: \"absolute\",\n                    backgroundColor: \"rgb(64, 64, 58)\",\n                    top: \"-25px\",\n                    right: \"-10px\",\n                    color: \"#fff\",\n                    padding: \"5px\",\n                    textAlign: \"center\",\n                    borderRadius: \"6px\"\n                  }}\n                >\n                  Copied!\n                </Text>\n              )}\n              <FontAwesome name=\"copy\" />\n            </View>\n          </Touchable>\n        ))}\n      </View>\n    </View>\n  );\n}\n","import * as React from \"react\";\nimport { StyleSheet, Text } from \"react-native\";\nimport Touchable from \"react-native-platform-touchable\";\n\nexport default class CromaButton extends React.Component {\n  render() {\n    const { style, onPress, children } = this.props;\n    return (\n      <Touchable style={[styles.button, style]} onPress={onPress}>\n        <Text style={styles.text}> {children} </Text>\n      </Touchable>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    shadowColor: \"rgba(0,0,0, .4)\",\n    shadowOffset: { height: 1, width: 1 },\n    shadowOpacity: 1,\n    shadowRadius: 1,\n    backgroundColor: \"#fff\",\n    elevation: 2,\n    height: 50,\n    marginTop: 10,\n    marginBottom: 10,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  text: {\n    textTransform: \"uppercase\",\n    fontWeight: \"700\",\n    color: '#484a4c'\n  }\n});\n","import React from \"react\";\nimport { ScrollView, StyleSheet, Button } from \"react-native\";\nimport { ColorDetail } from \"../components/ColorDetails\";\nimport CromaButton from \"../components/CromaButton\";\n\nexport default function ColorDetailScreen(props) {\n  const color = props.navigation.getParam(\"color\");\n  return (\n    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>\n      <ColorDetail navigation={props.navigation} color={color}>\n        {color}\n      </ColorDetail>\n      <CromaButton\n        onPress={() => props.navigation.navigate(\"Palettes\", { color: color })}\n      >\n        See color palettes\n      </CromaButton>\n    </ScrollView>\n  );\n}\n\nColorDetailScreen.navigationOptions = ({ navigation }) => {\n  return {\n    title: navigation.getParam(\"color\")\n  };\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingLeft: 12,\n    paddingRight: 12\n  }\n});\n","import React, { useState } from \"react\";\nimport { ScrollView, View, StyleSheet } from \"react-native\";\nimport CromaButton from \"../components/CromaButton\";\nimport { CromaColorPicker as ColorPicker } from \"croma-color-picker\";\nexport default function ColorPickerScreen(props) {\n  const [color, setColor] = useState(\"#db0a5b\");\n  return (\n    <ScrollView showsVerticalScrollIndicator={false}>\n      <View style={styles.container}>\n        <ColorPicker\n          onChangeColor={color => {\n            setColor(color);\n          }}\n          style={[{ height: 350, flex: 1 }]}\n        />\n        <CromaButton\n          onPress={() => {\n            props.navigation.goBack();\n            props.navigation.getParam(\"onDone\")({ color: color });\n          }}\n        >\n          Done\n        </CromaButton>\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: \"column\",\n    margin: 8\n  }\n});\n","import * as React from \"react\";\nimport { StyleSheet, View, Text } from \"react-native\";\nimport Card from \"./Card\";\nimport Colors from \"../constants/Colors\";\nimport MultiColorView from \"./MultiColorView\";\n\nexport class PalettePreviewCard extends React.Component {\n  render() {\n    return (\n      <Card {...this.props}>\n        <View>\n          <MultiColorView {...this.props}></MultiColorView>\n          <View style={styles.bottom}>\n            <Text style={styles.label}>{this.props.name}</Text>\n          </View>\n        </View>\n      </Card>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  bottom: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    height: 48\n  },\n  label: {\n    flex: 1,\n    fontWeight: \"500\",\n    marginHorizontal: 16,\n    color: Colors.darkGrey\n  }\n});\n","import React from \"react\";\nimport { ScrollView, StyleSheet, Text } from \"react-native\";\nimport Color from \"pigment/full\";\nimport { PalettePreviewCard } from \"../components/PalettePreviewCard\";\nexport default function PalettesScreen(props) {\n  // Convert camelCase to sentence\n  const parseCamelCase = text => {\n    if (typeof text !== \"string\") {\n      return \"\";\n    }\n    return text\n      .replace(/([a-z])([A-Z])/g, \"$1 $2\")\n      .replace(/\\b([A-Z]+)([A-Z])([a-z])/, \"$1 $2$3\")\n      .replace(/^./, str => str.toUpperCase());\n  };\n  const color = new Color(props.navigation.getParam(\"color\"));\n  let items = [];\n  for (const i in color) {\n    if (/.*scheme$/i.test(i) && typeof color[i] === \"function\") {\n      let colors = [];\n      const paletteColors = color[i]();\n      paletteColors.forEach(c => colors.push({ color: c.tohex() }));\n      items.push(\n        <PalettePreviewCard\n          onPress={() =>\n            props.navigation.navigate(\"ColorList\", { colors: colors })\n          }\n          key={i.toString()}\n          colors={colors}\n          name={parseCamelCase(i.toString())}\n        ></PalettePreviewCard>\n      );\n    }\n  }\n  return (\n    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>\n      {items}\n    </ScrollView>\n  );\n}\n\nPalettesScreen.navigationOptions = ({ navigation }) => {\n  return {\n    title: navigation.getParam(\"color\")\n  };\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingLeft: 12,\n    paddingRight: 12\n  }\n});\n","import React, { useState, useEffect } from \"react\";\nimport { Text, View, StyleSheet, TextInput, Platform } from \"react-native\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport { PalettePreviewCard } from \"../components/PalettePreviewCard\";\nimport Colors from \"../constants/Colors\";\nimport CromaButton from \"../components/CromaButton\";\nimport { Croma } from \"../store/store\";\nimport { TextDialog } from \"./CommanDialogs\";\n\nexport const SavePalette = props => {\n  const [paletteName, setPaletteName] = useState(\n    props.navigation.getParam(\"name\") ? props.navigation.getParam(\"name\") : \"\"\n  );\n  const [finalColors, setFinalColors] = useState([]);\n  const [isUnlockProNotification, setIsUnlockProNotifiction] = useState(false);\n  const [isPaletteNameExist, setIsPaletteNameExist] = React.useState(false);\n  const { addPalette, allPalettes, isPro } = React.useContext(Croma);\n\n  useEffect(() => {\n    let colorsFromParams = props.navigation.getParam(\"colors\");\n    if (typeof colorsFromParams === \"string\") {\n      colorsFromParams = JSON.parse(colorsFromParams);\n    }\n    const colors = [...new Set(colorsFromParams || [])];\n    setIsUnlockProNotifiction(!isPro && colors.length > 4);\n    setFinalColors(colors);\n    setTimeout(() => {\n      setIsUnlockProNotifiction(false);\n    }, 5000);\n  }, []);\n\n  const { title, navigationPath } = props;\n  return (\n    <ScrollView style={{margin: 8}} showsVerticalScrollIndicator={false}>\n      <PalettePreviewCard\n        colors={finalColors.slice(\n          0,\n          isPro ? finalColors.length : 4\n        )}\n        name={paletteName}\n      />\n      <View style={styles.card}>\n        <Text style={[styles.label, styles.title]}>{title}</Text>\n        <TextInput\n          style={styles.input}\n          value={paletteName}\n          placeholder=\"Enter a name for the palette\"\n          onChangeText={name => setPaletteName(name)}\n        />\n      </View>\n      <CromaButton\n        onPress={async () => {\n          if (allPalettes[paletteName]) {\n            setIsPaletteNameExist(true);\n            setTimeout(() => {\n              setIsPaletteNameExist(false);\n            }, 3000);\n            return null;\n          }\n          const palette = { name: paletteName, colors: finalColors };\n          addPalette(palette);\n          if (navigationPath === \"Palette\") {\n            props.navigation.replace(navigationPath, palette);\n          } else {\n            props.navigation.navigate(navigationPath);\n          }\n        }}\n      >\n        Save palette\n      </CromaButton>\n      {isPaletteNameExist && (\n        <TextDialog text={\"A palette with same name already exists.\"} />\n      )}\n      {isUnlockProNotification && (\n        <TextDialog text={\"Unlock pro to save more than 4 colors!\"} />\n      )}\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  card: {\n    flex: 1,\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    shadowColor: \"rgba(0,0,0, .4)\",\n    shadowOffset: { height: 1, width: 1 },\n    shadowOpacity: 1,\n    shadowRadius: 1,\n    backgroundColor: \"#fff\",\n    elevation: 2,\n    height: 92,\n    marginVertical: 10,\n    padding: 10\n  },\n  title: {\n    fontWeight: \"700\"\n  },\n  input: {\n    flex: 1,\n    borderBottomColor: \"black\",\n    borderBottomWidth: 1\n  },\n  bottom: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    padding: 16,\n    height: 54\n  },\n  label: {\n    flex: 1,\n    color: Colors.darkGrey\n  }\n});\n","import * as React from \"react\";\nimport { View, StyleSheet, Text } from \"react-native\";\n\nexport class SingleColorView extends React.Component {\n  render() {\n    return (\n      <View style={[styles.container, { backgroundColor: this.props.color }]}>\n        <Text style={styles.colorText}>{this.props.color}</Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 56,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  colorText: {\n    fontWeight: \"700\",\n    backgroundColor: \"rgba(255, 255, 255, .3)\",\n    paddingLeft: 8,\n    paddingRight: 8\n  }\n});\n","import React from \"react\";\nimport { SingleColorView } from \"../components/SingleColorView\";\nimport { ScrollView, StyleSheet } from \"react-native\";\nimport CromaButton from \"../components/CromaButton\";\n\nexport default function ColorListScreen(props) {\n  const colors = uniqueColors(props.navigation.getParam(\"colors\"));\n  return (\n    <ScrollView style={styles.listview} showsVerticalScrollIndicator={false}>\n      {colors.map(color => (\n        <SingleColorView key={color.color} color={color.color} />\n      ))}\n      <CromaButton\n        onPress={() =>\n          props.navigation.navigate(\"SavePalette\", { colors: colors })\n        }\n      >\n        SAVE AS NEW PALETTE\n      </CromaButton>\n    </ScrollView>\n  );\n}\nfunction uniqueColors(colors) {\n  let set = new Set();\n  let uniqueColors = [];\n  colors.forEach(color => {\n    if (!set.has(color.color)) {\n      uniqueColors.push(color);\n    }\n    set.add(color.color);\n  });\n  return uniqueColors;\n}\n\nColorListScreen.navigationOptions = {\n  title: \"Colors\"\n};\n\nconst styles = StyleSheet.create({\n  listview: {\n    margin: 8\n  }\n});\n","import * as React from \"react\";\nimport { StyleSheet, View, Text, Platform } from \"react-native\";\nimport Card from \"./Card\";\nimport Colors from \"../constants/Colors\";\nimport { FontAwesome } from \"@expo/vector-icons\";\nimport Touchable from \"react-native-platform-touchable\";\n\nexport default class SingleColorCard extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { animationType: 'fadeInLeftBig' };\n  }\n  render() { \n    return (\n      <Card {...this.props} animationType={this.state.animationType}>\n        <View>\n          <View\n            style={{ backgroundColor: this.props.color, height: 100 }}\n          ></View>\n          <View style={styles.bottom}> \n            <Text style={styles.label}>{this.props.color}</Text>\n            <View style={styles.actionButtonsView}>\n              <Touchable\n                {...{\n                  [Platform.OS === 'web' ? 'onClick' : 'onPress']: event => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.setState({animationType: 'fadeOutRightBig'})\n                    setTimeout(() => {\n                      this.props.colorDeleteFromPalette();\n                    }, 400)\n                  }\n                }}\n                style={styles.actionButton}\n              >\n                <FontAwesome size={20} name=\"trash\" />\n              </Touchable>\n            </View>\n          </View>\n        </View>\n      </Card>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  bottom: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    padding: 16,\n    height: 54\n  },\n  actionButtonsView: {\n    flexDirection: \"row\",\n    alignItems: \"flex-end\"\n  },\n  actionButton: {\n    paddingRight: 16\n  },\n  label: {\n    flex: 1,\n    marginHorizontal: 16,\n    fontWeight: \"500\",\n    color: Colors.darkGrey\n  }\n});\n","import React from \"react\";\n\nimport SingleColorCard from \"../components/SingleColorCard\";\nimport {\n  ScrollView,\n  StyleSheet,\n  View,\n  Dimensions,\n  Platform,\n  ToastAndroid\n} from \"react-native\";\nimport { UndoDialog, DialogContainer } from \"../components/CommanDialogs\";\nimport { Croma } from \"../store/store\";\nimport ActionButton from \"react-native-action-button\";\nimport Colors from \"../constants/Colors\";\nimport { Header } from \"react-navigation\";\nimport EmptyView from \"../components/EmptyView\";\nexport default function PaletteScreen(props) {\n  const { height, width } = Dimensions.get(\"window\");\n  const paletteName = props.navigation.getParam(\"name\");\n  const {\n    isPro,\n    allPalettes,\n    colorDeleteFromPalette,\n    undoColorDeletion,\n    addColorToPalette\n  } = React.useContext(Croma);\n  const colors = allPalettes[paletteName].colors;\n  const deletedColors = allPalettes[paletteName].deletedColors\n    ? allPalettes[paletteName].deletedColors\n    : [];\n\n  const deleteColor = index => {\n    colorDeleteFromPalette(props.navigation.getParam(\"name\"), index);\n  };\n\n  return (\n    <>\n      <View\n        style={(styles.container, { minHeight: height - Header.HEIGHT - 16 })}\n      >\n        <ScrollView\n          style={styles.listview}\n          showsVerticalScrollIndicator={false}\n        >\n          {colors.slice(0, isPro ? colors.length : 4).map((colorObj, index) => {\n            return (\n              <SingleColorCard\n                key={colorObj.color}\n                onPress={() =>\n                  props.navigation.navigate(\"ColorDetails\", {\n                    color: colorObj.color\n                  })\n                }\n                color={colorObj.color}\n                colorDeleteFromPalette={() => {\n                  deleteColor(index);\n                }}\n              ></SingleColorCard>\n            );\n          })}\n          <EmptyView />\n        </ScrollView>\n        <ActionButton\n          offsetY={60}\n          bgColor=\"rgba(68, 68, 68, 0.6)\"\n          hideShadow={Platform.OS === \"web\" ? true : false}\n          fixNativeFeedbackRadius={true} \n          buttonColor={Colors.accent}\n          onPress={() => {\n            if (Platform.OS === 'android' && colors.length >= 4 && isPro === false) {\n              ToastAndroid.show(\"Unlock pro to add more than 4 colors!\", ToastAndroid.LONG);\n            } else {\n              props.navigation.navigate(\"ColorPicker\", {\n                onDone: color => {\n                  addColorToPalette(paletteName, color);\n                }\n              });\n            }\n          }}\n          style={Platform.OS === 'web' ? styles.actionButtonWeb : {}}\n        />\n      </View>\n      <DialogContainer>\n        {deletedColors.map(colorObj => (\n          <UndoDialog\n            name={colorObj.color}\n            undoDeletionByName={colorName => {\n              undoColorDeletion(paletteName, colorName);\n            }}\n          />\n        ))}\n      </DialogContainer>\n    </>\n  );\n}\nPaletteScreen.navigationOptions = ({ navigation }) => {\n  return {\n    title: navigation.getParam(\"name\")\n  };\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  listview: {\n    margin: 8\n  },\n  actionButtonWeb: {\n    position: 'fixed',\n    transform: 'scale(1) rotate(0deg) !important', \n    right: Math.max((Dimensions.get(\"window\").width - 600) / 2, 0),\n    left: Math.max((Dimensions.get(\"window\").width - 600) / 2, 0)\n  }\n});\n","import React from \"react\";\nimport { Platform, Linking } from \"react-native\";\nimport { createStackNavigator } from \"react-navigation\";\nimport { createAppContainer } from \"react-navigation\";\nimport ColorDetailsScreen from \"../screens/ColorDetailScreen\";\nimport ColorPickerScreen from \"../screens/ColorPickerScreen\";\nimport PalettesScreen from \"../screens/PalettesScreen\";\nimport SavePaletteScreen from \"../screens/SavePaletteScreen\";\nimport AddPaletteManuallyScreen from \"../screens/AddPaletteManuallyScreen\";\nimport ColorListScreen from \"../screens/ColorListScreen\";\nimport PaletteScreen from \"../screens/PaletteScreen\";\nimport HomeScreen from \"../screens/HomeScreen\";\nimport Colors from \"../constants/Colors\";\nimport { Entypo } from \"@expo/vector-icons\";\nimport Touchable from \"react-native-platform-touchable\";\n\n\n\nconst config = Platform.select({\n  web: { headerMode: \"screen\" },\n  default: {}\n});\nconst RootStack = createStackNavigator(\n  {\n    ColorDetails: ColorDetailsScreen,\n    ColorPicker: ColorPickerScreen,\n    Palettes: PalettesScreen,\n    SavePalette: SavePaletteScreen,\n    ColorList: ColorListScreen,\n    Palette: PaletteScreen,\n    Home: HomeScreen,\n    AddPaletteManually: AddPaletteManuallyScreen\n  },\n  {\n    initialRouteName: \"Home\",\n    cardStyle: { backgroundColor: 'rgb(242, 242, 242)' },\n    /* The header config from HomeScreen is now here */\n    defaultNavigationOptions: {\n      headerStyle: {\n        backgroundColor: Colors.primary,\n      },\n      headerRight: (\n        Platform.OS === 'web' ?\n          <>\n            <Touchable\n              style={{ padding: '5px' }}\n              onPress={() => {\n                Linking.openURL(\n                  \"https://play.google.com/store/apps/details?id=app.croma\"\n                )\n              }}\n            >\n              <Entypo name=\"google-play\" style={{\n                fontSize: 25,\n                height: 25,\n                color: \"white\"\n              }} />\n            </Touchable>\n            <Touchable\n              style={{ padding: '5px', marginRight: '10px' }}\n              onPress={() => {\n                Linking.openURL(\n                  \"https://github.com/croma-app/croma-react\"\n                )\n              }}\n            >\n              <Entypo name=\"github\" style={{\n                fontSize: 25,\n                height: 25,\n                color: \"white\"\n              }} />\n            </Touchable>\n          </>\n          : ''\n      ),\n      headerTintColor: \"#fff\"\n    }\n  }\n);\n\nconst AppContainer = createAppContainer(RootStack);\n\nexport default RootStack;\n","import React from \"react\";\nimport { ScrollView } from \"react-native\";\nimport { SavePalette } from \"../components/SavePalette\";\n\nexport default function SavePaletteScreen(props) {\n  return (\n    <ScrollView showsVerticalScrollIndicator={false}>\n      <SavePalette\n        title={\"ADD NEW PALETTE\"}\n        navigationPath={\"Home\"}\n        navigation={props.navigation}\n      />\n    </ScrollView>\n  );\n}\n","import React from \"react\";\nimport { ScrollView } from \"react-native\";\nimport { SavePalette } from \"../components/SavePalette\";\n\nexport default function AddPaletteManuallyScreen(props) {\n  return (\n    <ScrollView showsVerticalScrollIndicator={false}>\n      <SavePalette\n        title={\"ADD PALETTE NAME\"}\n        navigationPath={\"Palette\"}\n        navigation={props.navigation}\n      />\n    </ScrollView>\n  );\n}\n","import { createBrowserApp } from \"@react-navigation/web\";\nimport { createSwitchNavigator } from \"react-navigation\";\n\nimport MainTabNavigator from \"./MainTabNavigator\";\n\nconst switchNavigator = createSwitchNavigator({\n  // You could add another route here for authentication.\n  // Read more at https://reactnavigation.org/docs/en/auth-flow.html\n  Main: MainTabNavigator\n});\nswitchNavigator.path = \"\";\n\nexport default createBrowserApp(switchNavigator, { history: \"hash\" });\n","import React from 'react';\nimport { Platform } from \"react-native\";\n\n\nexport default class ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { hasError: false };\n    }\n\n    componentDidCatch(error, info) {\n        if (Platform.OS === 'web') {\n            window.location = '/';\n        }\n        this.setState({ hasError: true });\n    }\n\n    render() {\n        if (this.state.hasError) {\n            // You can render any custom fallback UI\n            return <h1>Something went wrong.</h1>;\n        }\n        return this.props.children;\n    }\n}","import React, { useState, useEffect } from \"react\";\nimport { Platform, StatusBar, StyleSheet, View } from \"react-native\";\nimport Colors from \"./constants/Colors\";\nimport AppNavigator from \"./navigation/AppNavigator\";\nimport { ActivityIndicator } from \"react-native\";\nimport applicationHook, { initState, Croma } from \"./store/store\";\nimport ErrorBoundary from \"./components/ErrorBoundary\"\n\nexport default function App(props) {\n  const [isPalettesLoaded, setIsPalettesLoaded] = useState(false);\n  const applicationState = applicationHook(initState);\n\n  useEffect(() => {\n    (async () => {\n      await applicationState.loadInitPaletteFromStore();\n      setIsPalettesLoaded(true);\n    })();\n    if (Platform.OS === \"web\") {\n      applicationState.setPurchase({\n        platfrom: \"web\"\n      });\n    }\n  }, []);\n  return !isPalettesLoaded ? (\n    <View style={{ flex: 1, marginTop: \"20%\" }}>\n      <ActivityIndicator size=\"large\" color=\"#ef635f\" animating={true} />\n    </View>\n  ) : (\n      <Croma.Provider value={applicationState}>\n        <ErrorBoundary>\n          <View style={[styles.container]}>\n            <StatusBar\n              barStyle=\"light-content\"\n              // dark-content, light-content and default\n              hidden={false}\n              //To hide statusBar\n              backgroundColor={Colors.primaryDark}\n              //Background color of statusBar only works for Android\n              translucent={false}\n              //allowing light, but not detailed shapes\n              networkActivityIndicatorVisible={true}\n            />\n            <View\n              style={[{ flex: 1, backgroundColor: \"transparent\", maxWidth: 600 }]}\n              className={'navigation-workplace'}\n            >\n              {Platform.OS === \"ios\" && <StatusBar barStyle=\"default\" />}\n              <AppNavigator />\n            </View>\n          </View>\n        </ErrorBoundary>\n      </Croma.Provider>\n    );\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    backgroundColor: Colors.backgroundColor,\n    flexDirection: \"row\"\n  }\n});\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","const tintColor = \"#2f95dc\";\n\nexport default {\n  tintColor,\n  tabIconDefault: \"#ccc\",\n  tabIconSelected: tintColor,\n  tabBar: \"#fefefe\",\n  errorBackground: \"red\",\n  errorText: \"#fff\",\n  warningBackground: \"#EAEB5E\",\n  warningText: \"#666804\",\n  noticeBackground: tintColor,\n  noticeText: \"#fff\",\n  primary: \"#f1544d\",\n  primaryDark: \"#c94740\",\n  text: \"#fff\",\n  accent: \"#f0d04c\",\n  grey: \"#888\",\n  darkGrey: \"#333\",\n  lightGrey: \"#eee\",\n  white: \"#fff\",\n  black: \"#000\",\n  fadedBlack: \"rgba(0, 0, 0, .5)\",\n  backgroundColor: \"#f2f2f2\"\n};\n","import { AsyncStorage } from \"react-native\";\nconst APPLICATION_STATE_KEY = \"APLICATION_STATE\";\nconst IS_USER_ALREADY_EXIST_KEY = \"IS_USER_ALREADY_EXIST\";\nexport default class Storage {\n  static getApplicationState = async () => {\n    let state = await AsyncStorage.getItem(APPLICATION_STATE_KEY);\n    if (state) {\n      return JSON.parse(state);\n    } else {\n      return {};\n    }\n  };\n\n  static setApplicationState = async state => {\n    await AsyncStorage.setItem(APPLICATION_STATE_KEY, JSON.stringify(state));\n  };\n\n  static setUserAlreadyExists = async () => {\n    await AsyncStorage.setItem(IS_USER_ALREADY_EXIST_KEY, \"true\");\n  };\n\n  static checkUserAlreadyExists = async () => {\n    return await AsyncStorage.getItem(IS_USER_ALREADY_EXIST_KEY);\n  };\n}\n","import React, { useState } from \"react\";\nimport InAppBilling from \"react-native-billing\";\nimport Storage from \"./../libs/Storage\";\nimport { Platform, ToastAndroid } from \"react-native\";\nconst UNDO_TIMEOUT = 3000;\n\nexport const initState = {\n  allPalettes: {},\n  deletedPalettes: {},\n  isLoading: false,\n  isPro: false\n};\n\nconst syncStateToStore = function (state) {\n  Storage.setApplicationState(state);\n};\n\nconst sortPalette = palette =>\n  palette.colors.sort((a, b) => (a.color > b.color ? 1 : -1));\n\nexport default function applicationHook(initState) {\n  const addPalette = async palette => {\n    setState(state => {\n      const { allPalettes } = state;\n      sortPalette(palette);\n      if (!palette.createdAt) {\n        palette.createdAt = new Date().valueOf()\n      }\n      allPalettes[palette.name] = palette;\n      // sorting palettes before save \n      const allPalettesArray = Object.keys(allPalettes).map((key) => allPalettes[key])\n      allPalettesArray.sort((a, b) => {\n        // Todo - Just a check for old user  \n        if (!a.createdAt) {\n          a.createdAt = 0\n        }\n        if (!b.createdAt) {\n          b.createdAt = 0\n        }\n        return new Date(b.createdAt) - new Date(a.createdAt)\n      });\n      const ordered = {};\n      allPalettesArray.forEach(function (_palette) {\n        ordered[_palette.name] = _palette;\n      });\n      return { ...state, allPalettes: ordered };\n    });\n  };\n\n  const loadInitPaletteFromStore = async () => {\n    setState((state) => ({ ...state, isLoading: true }));\n    // Loading application state from localStorage\n    const _state = await Storage.getApplicationState();\n    setState(state => ({\n      ...state,\n      ..._state,\n      isLoading: false\n    }));\n\n    // Setting default palette when user comming first time\n    let defaultPalettes = {};\n    const isUserAleadyExits = await Storage.checkUserAlreadyExists();\n    \n    if (isUserAleadyExits != \"true\") {\n      if (Platform.OS !== 'web') {\n        try {\n          await InAppBilling.open();\n          // If subscriptions/products are updated server-side you\n          // will have to update cache with loadOwnedPurchasesFromGoogle()\n          await InAppBilling.loadOwnedPurchasesFromGoogle();\n          isPurchased = await InAppBilling.isPurchased(\"croma_pro\");\n          if (isPurchased) {\n            ToastAndroid.show(\"Your purchase restored successfully..\", ToastAndroid.LONG);\n          }\n          setState((state) => {\n            return { ...state, isPro: isPurchased }\n          })\n        } catch (err) {\n          ToastAndroid.show(\"Loading purchase detail failed. \" + err, ToastAndroid.LONG);\n        } finally {\n          await InAppBilling.close();\n        }\n      }\n      Storage.setUserAlreadyExists();\n      defaultPalettes = {\n        name: \"Croma example palette\",\n        colors: [\n          { color: \"#f0675f\" },\n          { color: \"#f3d163\" },\n          { color: \"#ebef5c\" },\n          { color: \"#c9ef5b\" }\n        ]\n      };\n      addPalette(defaultPalettes);\n    }\n    \n  };\n\n  const removePaletteFromStateByName = name => {\n    setState(state => {\n      const { deletedPalettes } = state;\n      clearTimeout(deletedPalettes[name]['timeout'])\n      delete deletedPalettes[name];\n      return { ...state, deletedPalettes };\n    });\n  };\n\n  const setPurchase = details => {\n    setState(state => {\n      return { ...state, isPro: true, purchaseDetails: details };\n    });\n  };\n\n  const addColorToPalette = (name, color) => {\n    setState(state => {\n      const { allPalettes } = state;\n      allPalettes[name].colors = allPalettes[name].colors.concat(color);\n      sortPalette(allPalettes[name]);\n      return { ...state, allPalettes };\n    });\n  };\n\n  const deletePaletteByName = async name => {\n    setState(state => {\n      const { allPalettes, deletedPalettes } = state;\n      if (allPalettes[name]) {\n        deletedPalettes[name] = { ...allPalettes[name] };\n        delete allPalettes[name];\n        deletedPalettes[name]['timeout'] = setTimeout(() => {\n          removePaletteFromStateByName(name);\n        }, UNDO_TIMEOUT);\n        return { ...state, allPalettes, deletedPalettes };\n      }\n      return { ...state };\n    });\n  };\n\n  const undoDeletionByName = name => {\n    setState(state => {\n      const { deletedPalettes } = state;\n      if (deletedPalettes[name]) {\n        addPalette({ ...deletedPalettes[name] });\n        removePaletteFromStateByName(name);\n      }\n      return { ...state };\n    });\n  };\n\n  const colorDeleteFromPalette = (name, colorIndex) => {\n    setState(state => {\n      const { allPalettes } = state;\n      const deletedColor = allPalettes[name].colors.splice(colorIndex, 1);\n      deletedColor[0]['timeout'] = setTimeout(() => {\n        clearDeletedColor(name, deletedColor[0]);\n      }, UNDO_TIMEOUT);\n      if (allPalettes[name].deletedColors) {\n        allPalettes[name].deletedColors.push({ ...deletedColor[0] });\n      } else {\n        allPalettes[name].deletedColors = [...deletedColor];\n      }\n      return { ...state, allPalettes };\n    });\n  };\n\n  const undoColorDeletion = (name, colorName) => {\n    setState(state => {\n      const { allPalettes } = state;\n      allPalettes[name].colors.push({ color: colorName });\n      allPalettes[name].deletedColors.forEach((color, index) => {\n        if (color.color === colorName) {\n          clearTimeout(color.timeout)\n          allPalettes[name].deletedColors.splice(index, 1);\n        }\n      });\n      sortPalette(allPalettes[name]);\n      return { ...state, allPalettes };\n    });\n  };\n\n  const clearDeletedColor = (name, colorObj) => {\n    setState(state => {\n      const { allPalettes } = state;\n      allPalettes[name].deletedColors.forEach((color, index) => {\n        if (color.color === colorObj.color) {\n          allPalettes[name].deletedColors.splice(index, 1);\n        }\n      });\n      clearTimeout(colorObj.timeout)\n      return { ...state, allPalettes };\n    });\n  };\n\n  const [state, setState] = useState({\n    ...initState,\n    loadInitPaletteFromStore,\n    undoDeletionByName,\n    deletePaletteByName,\n    addPalette,\n    colorDeleteFromPalette,\n    undoColorDeletion,\n    addColorToPalette,\n    setPurchase\n  });\n\n  // Sync state to local storage\n  if (\n    Object.keys(state.allPalettes).length !== 0 ||\n    Object.keys(state.deletedPalettes).length !== 0 ||\n    state.isPro !== initState.isPro\n  ) {\n    syncStateToStore(state);\n  }\n  return state;\n}\n\nexport const Croma = React.createContext();\n","import React from \"react\";\nimport * as Animatable from 'react-native-animatable';\nimport { View, Text, StyleSheet, Platform, Dimensions } from \"react-native\";\nimport Touchable from \"react-native-platform-touchable\";\n\nexport const DialogContainer = props => (\n  <View style={Platform.OS === 'web' ? styles.DailogContainerWeb : styles.DailogContainer} >\n    {props.children}\n  </View>\n);\n\nexport const UndoDialog = props => {\n  /*\n    Todo - need to add deletion based on type \n  */\n  const { name, undoDeletionByName } = props;\n  return (\n    <Animatable.View animation={'fadeInUpBig'} duration={500} style={[styles.undoCard, styles.marginAndRadius]} useNativeDriver={true}>\n      <View >\n        <Text style={styles.undoText}>Deleted {name}. </Text>\n      </View>\n      <Touchable\n        onPress={event => {\n          event.stopPropagation();\n          event.preventDefault();\n          undoDeletionByName(name);\n        }}\n      >\n        <Text style={styles.undoButton}> UNDO </Text>\n      </Touchable>\n    </Animatable.View>\n  );\n};\n\nexport const TextDialog = props => (\n  <Animatable.View animation={'fadeInUp'} duration={500} useNativeDriver={true} style={styles.undoCard}>\n    <View >\n      <Text style={styles.undoText}>{props.text}</Text>\n    </View>\n  </Animatable.View>\n);\n\nconst styles = StyleSheet.create({\n  undoCard: {\n    backgroundColor: \"#303036\",\n    padding: 15,\n    flexDirection: 'row',\n    display: 'flex',\n    justifyContent: 'space-between'\n  },\n  marginAndRadius: {\n    margin: 2,\n    borderRadius: 6,\n  },\n  undoText: {\n    color: \"#fff\",\n    fontSize: 15\n  },\n  undoButton: {\n    fontWeight: \"bold\",\n    color: \"#e6be0b\",\n    fontSize: 15\n  },\n  DailogContainerWeb: {\n    position: 'fixed',\n    bottom: 0,\n    left: 0,\n    width: Math.min(Dimensions.get(\"window\").width, 400) - 10,\n    margin: 5,\n    zIndex: 10\n  },\n  DailogContainer: {\n    position: \"absolute\",\n    bottom: 0,\n    width: \"100%\",\n    zIndex: 10\n  }\n});\n"],"sourceRoot":""}