{"version":3,"sources":["/home/runner/work/croma-react/croma-react/components/Card.js","/home/runner/work/croma-react/croma-react/components/MultiColorView.js","/home/runner/work/croma-react/croma-react/components/EmptyView.js","/home/runner/work/croma-react/croma-react/screens/HomeScreen.js","/home/runner/work/croma-react/croma-react/components/PaletteCard.js","/home/runner/work/croma-react/croma-react/libs/ColorPicker.js","/home/runner/work/croma-react/croma-react/components/ColorDetails.js","/home/runner/work/croma-react/croma-react/components/CromaButton.js","/home/runner/work/croma-react/croma-react/screens/ColorDetailScreen.js","/home/runner/work/croma-react/croma-react/screens/ColorPickerScreen.js","/home/runner/work/croma-react/croma-react/components/PalettePreviewCard.js","/home/runner/work/croma-react/croma-react/screens/PalettesScreen.js","/home/runner/work/croma-react/croma-react/components/SavePalette.js","/home/runner/work/croma-react/croma-react/components/SingleColorView.js","/home/runner/work/croma-react/croma-react/screens/ColorListScreen.js","/home/runner/work/croma-react/croma-react/components/SingleColorCard.js","/home/runner/work/croma-react/croma-react/screens/PaletteScreen.js","/home/runner/work/croma-react/croma-react/navigation/MainTabNavigator.js","/home/runner/work/croma-react/croma-react/screens/SavePaletteScreen.js","/home/runner/work/croma-react/croma-react/screens/AddPaletteManuallyScreen.js","/home/runner/work/croma-react/croma-react/navigation/AppNavigator.web.js","/home/runner/work/croma-react/croma-react/App.js","/home/runner/work/croma-react/croma-react/web-build/register-service-worker.js","/home/runner/work/croma-react/croma-react/constants/Colors.js","/home/runner/work/croma-react/croma-react/libs/Storage.js","/home/runner/work/croma-react/croma-react/store/store.js","/home/runner/work/croma-react/croma-react/components/CommanDialogs.js"],"names":["Card","Platform","OS","onClick","this","props","onPress","style","styles","inner","View","children","React","StyleSheet","create","backgroundColor","Colors","white","marginVertical","elevation","MultiColorView","palette","alignItems","flexDirection","height","color","flex","colors","map","item","key","EmptyView","HomeScreen","Dimensions","get","width","useContext","Croma","isLoading","allPalettes","loadInitPaletteFromStore","deletedPalettes","undoDeletionByName","useState","pickImgloading","setPickImgLoading","useEffect","a","async","Constants","platform","ios","Permissions","status","alert","getPermissionAsync","container","minHeight","Header","HEIGHT","showsVerticalScrollIndicator","Object","keys","name","navigation","bgColor","hideShadow","buttonColor","accent","Item","title","ImagePicker","mediaTypes","All","quality","base64","undefined","result","Jimp","read","Buffer","uri","pickImage","then","image","err","navigate","ColorPicker","getProminentColors","catch","actionButtonIcon","onDone","navigationOptions","margin","justifyContent","fontSize","PaletteCard","deletePaletteByName","bottom","label","actionButtonsView","actionButton","icon","faShareSquare","event","preventDefault","stopPropagation","faTrashAlt","padding","paddingRight","marginHorizontal","darkGrey","resize","AUTO","data","_prepareDataForKmeans","ans","Date","now","kmeans","initialization","maxIterations","centroids","sort","c1","c2","size","kmeansColors","centroid","Color","_labToHex","_getFinalColors","c","tohex","_toArray","tohsv","filteredColors","i","length","colorList","j","push","finalColors","lab","bitmap","intColor","getPixelColor","hex","_toHexColor","xyz","tolab","substr","split","v","parseFloat","rgba","intToRGBA","r","g","b","index","indexOf","ColorDetail","copyiedIndex","setCopyiedIntex","alignSelf","info","colorNameText","fontWeight","items","value","torgb","tohsl","tohwb","tocmyk","luminance","toFixed","darkness","debouncedSetCopiedIndex","func","delay","debounceTimer","context","args","arguments","clearTimeout","setTimeout","apply","debounce","marginTop","Clipboard","setString","writeToClipboard","Text","position","top","right","faCopy","CromaButton","button","textTransform","shadowColor","shadowOffset","shadowOpacity","shadowRadius","marginBottom","ColorDetailScreen","getParam","ScrollView","paddingLeft","PalettePreviewCard","PalettesScreen","test","text","forEach","toString","replace","str","toUpperCase","SavePalette","paletteName","setPaletteName","isPaletteNameExist","setIsPaletteNameExist","addPalette","navigationPath","card","TextInput","input","placeholder","onChangeText","Set","borderBottomColor","borderBottomWidth","SingleColorView","colorText","ColorListScreen","set","uniqueColors","has","add","listview","SingleColorCard","colorDeleteFromPalette","PaletteScreen","undoColorDeletion","addColorToPalette","deletedColors","deleteColor","colorObj","ActionButton","colorName","RootStack","select","web","headerMode","default","createStackNavigator","ColorDetails","ColorDetailsScreen","setColor","onChangeColor","goBack","Palettes","ColorList","Palette","Home","AddPaletteManually","initialRouteName","transparentCard","defaultNavigationOptions","headerStyle","primary","headerTintColor","createAppContainer","switchNavigator","createSwitchNavigator","Main","MainTabNavigator","path","createBrowserApp","history","App","Provider","applicationHook","initState","maxWidth","StatusBar","barStyle","navigator","window","addEventListener","serviceWorker","register","scope","error","console","tintColor","tabIconDefault","tabIconSelected","tabBar","errorBackground","errorText","warningBackground","warningText","noticeBackground","noticeText","primaryDark","grey","lightGrey","black","fadedBlack","Storage","getAllPalettes","AsyncStorage","getItem","palettes","JSON","parse","saveAllPalette","allPalette","setItem","stringify","setUserAlreadyExists","checkUserAlreadyExists","sortPalette","setState","state","removePaletteFromStateByName","clearDeletedColor","splice","defaultPalettes","colorIndex","deletedColor","concat","createContext","DialogContainer","UndoDialog","undoCard","undoText","undoButton","TextDialog"],"mappings":"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","file":"static/js/app.2dc86948.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { StyleSheet, Animated, Platform } from \"react-native\";\nimport Colors from \"../constants/Colors\";\nimport Touchable from \"react-native-platform-touchable\";\n\nexport default class Card extends React.Component {\n  render() {\n    return (\n      <Touchable\n        {...(Platform.OS === \"web\"\n          ? {\n              // When scrolling the document body, the touchables might be triggered\n              // see  https://github.com/necolas/react-native-web/issues/1219\n              onClick: this.props.onPress\n            }\n          : {\n              onPress: this.props.onPress\n            })}\n        style={[styles.inner]}\n      >\n        <Animated.View {...this.props}>{this.props.children}</Animated.View>\n      </Touchable>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  inner: {\n    backgroundColor: Colors.white,\n    marginVertical: 8,\n    elevation: 1\n  }\n});\n","import * as React from \"react\";\nimport { StyleSheet, View, Text } from \"react-native\";\nexport default function MultiColorView(props) {\n  const styles = StyleSheet.create({\n    palette: {\n      alignItems: \"stretch\",\n      flexDirection: \"row\",\n      height: 112\n    },\n    color: {\n      flex: 1\n    }\n  });\n  return (\n    <View style={styles.palette}>\n      {props.colors &&\n        props.colors.map(item => (\n          <View\n            style={[styles.color, { backgroundColor: item.color }]}\n            key={item.color}\n          />\n        ))}\n    </View>\n  );\n}\n","import * as React from \"react\";\nimport { View } from \"react-native\";\n\nconst EmptyView = () => <View style={{ height: 100 }}></View>;\n\nexport default EmptyView;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  ScrollView,\n  StyleSheet,\n  ActivityIndicator,\n  View,\n  Dimensions,\n  Platform\n} from \"react-native\";\nimport { PaletteCard } from \"../components/PaletteCard\";\nimport { UndoDialog, DialogContainer } from \"../components/CommanDialogs\";\nimport { Croma } from \"../store/store\";\nimport Colors from \"../constants/Colors\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport Constants from \"expo-constants\";\nimport * as Permissions from \"expo-permissions\";\nimport ColorPicker from \"../libs/ColorPicker\";\nimport Jimp from \"jimp\";\nimport { Header } from \"react-navigation\";\nimport EmptyView from \"../components/EmptyView\";\nimport ActionButton from \"react-native-action-button\";\nimport { Ionicons } from \"@expo/vector-icons\";\nconst HomeScreen = function(props) {\n  const { height, width } = Dimensions.get(\"window\");\n\n  const {\n    isLoading,\n    allPalettes,\n    loadInitPaletteFromStore,\n    deletedPalettes,\n    undoDeletionByName\n  } = React.useContext(Croma);\n  const [pickImgloading, setPickImgLoading] = useState(false);\n\n  const pickImage = async () => {\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      quality: 1,\n      base64: true\n    });\n    if (result.base64 !== undefined) {\n      return await Jimp.read(new Buffer(result.base64, \"base64\"));\n    } else {\n      return await Jimp.read(result.uri);\n    }\n  };\n  const getPermissionAsync = async () => {\n    if (Constants.platform.ios) {\n      const { status } = await Permissions.askAsync(Permissions.CAMERA_ROLL);\n      if (status !== \"granted\") {\n        alert(\"Sorry, we need camera roll permissions to make this work!\");\n      }\n    }\n  };\n  useEffect(() => {\n    loadInitPaletteFromStore();\n    getPermissionAsync();\n  }, []);\n  if (isLoading) {\n    return <ActivityIndicator />;\n  } else {\n    return (\n      <>\n        <View\n          style={[styles.container, { minHeight: height - Header.HEIGHT - 16 }]}\n        >\n          {pickImgloading ? <ActivityIndicator /> : <View />}\n          <ScrollView showsVerticalScrollIndicator={false}>\n            {Object.keys(allPalettes).map(name => {\n              return (\n                <PaletteCard\n                  key={name}\n                  colors={allPalettes[name].colors}\n                  name={name}\n                  navigation={props.navigation}\n                />\n              );\n            })}\n            <EmptyView />\n          </ScrollView>\n        </View>\n\n        <DialogContainer>\n          {Object.keys(deletedPalettes).map(name => {\n            return (\n              <UndoDialog\n                key={name}\n                name={name}\n                undoDeletionByName={undoDeletionByName}\n              />\n            );\n          })}\n        </DialogContainer>\n        {/*Setting box shadow to false because of Issue on the web: https://github.com/mastermoo/react-native-action-button/issues/337 */}\n        <ActionButton\n          bgColor=\"rgba(68, 68, 68, 0.6)\"\n          hideShadow={Platform.OS === \"web\" ? \"true\" : \"false\"}\n          buttonColor={Colors.accent}\n          key=\"action-button-home\"\n        >\n          <ActionButton.Item\n            buttonColor=\"#9b59b6\"\n            title=\"Get palette from image\"\n            onPress={() => {\n              setPickImgLoading(true);\n              pickImage()\n                .then((image, err) => {\n                  setPickImgLoading(false);\n                  props.navigation.navigate(\"ColorList\", {\n                    colors: ColorPicker.getProminentColors(image)\n                  });\n                })\n                .catch(err => {\n                  setPickImgLoading(false);\n                });\n            }}\n          >\n            <Ionicons name=\"md-camera\" style={styles.actionButtonIcon} />\n          </ActionButton.Item>\n          <ActionButton.Item\n            buttonColor=\"#3498db\"\n            title=\"Get palette from color\"\n            onPress={() => {\n              props.navigation.navigate(\"ColorPicker\", {\n                onDone: color => {\n                  props.navigation.navigate(\"Palettes\", {\n                    color: color.color\n                  });\n                }\n              });\n            }}\n          >\n            <Ionicons name=\"md-color-palette\" style={styles.actionButtonIcon} />\n          </ActionButton.Item>\n          <ActionButton.Item\n            buttonColor=\"#1abc9c\"\n            title=\"Add colors manually\"\n            onPress={() => props.navigation.navigate(\"AddPaletteManually\")}\n          >\n            <Ionicons name=\"md-color-filter\" style={styles.actionButtonIcon} />\n          </ActionButton.Item>\n        </ActionButton>\n      </>\n    );\n  }\n};\n\nexport default HomeScreen;\n\nHomeScreen.navigationOptions = {\n  title: \"Croma\"\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    margin: 8,\n    justifyContent: \"center\"\n  },\n  actionButtonIcon: {\n    fontSize: 20,\n    height: 22,\n    color: \"white\"\n  }\n});\n","import * as React from \"react\";\nimport { StyleSheet, View, Text } from \"react-native\";\nimport Card from \"./Card\";\nimport Colors from \"../constants/Colors\";\nimport MultiColorView from \"./MultiColorView\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-native-fontawesome\";\nimport {\n  faTrashAlt,\n  faShareSquare,\n  faEdit\n} from \"@fortawesome/free-solid-svg-icons\";\nimport Touchable from \"react-native-platform-touchable\";\nimport { Croma } from \"../store/store\";\n\nexport const PaletteCard = props => {\n  const { deletePaletteByName } = React.useContext(Croma);\n  return (\n    <Card\n      {...props}\n      onPress={() => {\n        props.navigation.navigate(\"Palette\", props);\n      }}\n    >\n      <MultiColorView {...props}></MultiColorView>\n\n      <View style={styles.bottom}>\n        <Text style={styles.label}>{props.name}</Text>\n        <View style={styles.actionButtonsView}>\n          <Touchable style={styles.actionButton}>\n            <FontAwesomeIcon icon={faShareSquare} />\n          </Touchable>\n          <Touchable\n            onPress={event => {\n              event.preventDefault();\n              event.stopPropagation();\n              deletePaletteByName(props.name);\n            }}\n            style={styles.actionButton}\n          >\n            <FontAwesomeIcon icon={faTrashAlt} />\n          </Touchable>\n        </View>\n      </View>\n    </Card>\n  );\n};\n\nconst styles = StyleSheet.create({\n  bottom: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    padding: 16,\n    height: 54\n  },\n  actionButtonsView: {\n    flexDirection: \"row\",\n    alignItems: \"flex-end\"\n  },\n  actionButton: {\n    paddingRight: 16\n  },\n  label: {\n    flex: 1,\n    marginHorizontal: 16,\n    color: Colors.darkGrey\n  }\n});\n","import kmeans from \"ml-kmeans\";\nimport Jimp from \"jimp\";\nimport Color from \"pigment/full\";\nexport default class ColorPicker {\n  static getProminentColors(image) {\n    /*\n    Jimp.RESIZE_NEAREST_NEIGHBOR;\n    Jimp.RESIZE_BILINEAR;\n    Jimp.RESIZE_BICUBIC;\n    Jimp.RESIZE_HERMITE;\n    Jimp.RESIZE_BEZIER;\n    These does not work with first params.\n    */\n    image.resize(Jimp.AUTO, 100);\n    let data = ColorPicker._prepareDataForKmeans(image);\n    let time = Date.now();\n    let ans = kmeans(data, 24, { initialization: \"random\", maxIterations: 20 });\n    ans.centroids = ans.centroids.sort((c1, c2) => c2.size - c1.size);\n    let kmeansColors = ans.centroids.map(centroid => {\n      return new Color(this._labToHex(centroid.centroid));\n    });\n    return this._getFinalColors(kmeansColors).map(c => {\n      return { color: c.tohex() };\n    });\n  }\n  // original implementation in java: https://github.com/kamalkishor1991/croma/blob/master/src/main/java/org/numixproject/colorextractor/image/KMeansColorPicker.java\n  static _getFinalColors(kmeansColors) {\n    kmeansColors.sort(\n      (c1, c2) => this._toArray(c1.tohsv())[0] < this._toArray(c2.tohsv())[0]\n    );\n    let filteredColors = [];\n    for (let i = 0; i < kmeansColors.length; i += 4) {\n      let colorList = [];\n      for (let j = 0; j < 4; j++) {\n        colorList.push(kmeansColors[i + j]);\n      }\n      colorList.sort(\n        (c1, c2) => this._toArray(c1.tohsv())[1] < this._toArray(c2.tohsv())[1]\n      );\n      filteredColors.push(colorList[colorList.length - 1]);\n      filteredColors.push(colorList[colorList.length - 2]);\n    }\n    let finalColors = [];\n    for (let i = 0; i < filteredColors.length; i += 2) {\n      if (\n        this._toArray(filteredColors[i].tohsv())[2] >\n        this._toArray(filteredColors[i + 1].tohsv())[2]\n      ) {\n        finalColors.push(filteredColors[i]);\n      } else {\n        finalColors.push(filteredColors[i + 1]);\n      }\n    }\n    return finalColors;\n  }\n\n  static _labToHex(lab) {\n    let color = new Color(\n      \"lab(\" + lab[0] + \", \" + lab[1] + \", \" + lab[2] + \")\"\n    );\n    return color.tohex();\n  }\n\n  static _prepareDataForKmeans(image) {\n    let data = [];\n\n    for (let i = 0; i < image.bitmap.width; i++) {\n      for (let j = 0; j < image.bitmap.height; j++) {\n        let intColor = image.getPixelColor(i, j);\n        let hex = this._toHexColor(intColor);\n        let color = new Color(hex);\n        let xyz = color.tolab();\n        // format: \"xyz(19.78527130484015, 8.600439447528947, 95.19796416837329)\" to double array of xyz\n        xyz = xyz\n          .substr(4, xyz.length - 5)\n          .split(\", \")\n          .map(v => parseFloat(v));\n        data.push(xyz);\n      }\n    }\n\n    return data;\n  }\n\n  static _toHexColor(intColor) {\n    let rgba = Jimp.intToRGBA(intColor); // TODO: Need to optimize this once everything else starts working.\n    let color = new Color(\n      \"rgb(\" + rgba.r + \", \" + rgba.g + \", \" + rgba.b + \")\"\n    );\n    return color.tohex();\n  }\n\n  static _toArray(color) {\n    let index = color.indexOf(\"(\");\n    color = color.substr(index + 1, color.length - index);\n    return color.split(\", \").map(c => parseFloat(c));\n  }\n}\n","import React, { useState } from \"react\";\nimport { StyleSheet, Text, View, Clipboard } from \"react-native\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-native-fontawesome\";\nimport { faCopy } from \"@fortawesome/free-regular-svg-icons\";\nimport Touchable from \"react-native-platform-touchable\";\n\nimport Color from \"pigment/full\";\n\nexport function ColorDetail(props) {\n  const [copyiedIndex, setCopyiedIntex] = useState(-1);\n  const styles = StyleSheet.create({\n    backgroundColor: {\n      backgroundColor: props.color,\n      height: 112,\n      alignSelf: \"stretch\"\n    },\n    info: {\n      flexDirection: \"row\",\n      justifyContent: \"space-between\",\n      padding: 10\n    },\n    colorNameText: {\n      fontSize: 16,\n      fontWeight: \"500\"\n    }\n  });\n  const color = new Color(props.color);\n  let items = [\n    { key: \"HEX\", value: color.tohex() },\n    { key: \"RGB\", value: color.torgb() },\n    { key: \"HSL\", value: color.tohsl() },\n    { key: \"HSV\", value: color.tohsv() },\n    { key: \"HWB\", value: color.tohwb() },\n    { key: \"CMYK\", value: color.tocmyk() },\n    { key: \"CIELAB\", value: color.tolab() },\n    { key: \"Luminance\", value: (color.luminance() * 100).toFixed(2) + \"%\" },\n    { key: \"Darkness\", value: (color.darkness() * 100).toFixed(2) + \"%\" }\n  ];\n\n  const debounce = (func, delay) => {\n    let debounceTimer;\n    return function() {\n      const context = this;\n      const args = arguments;\n      clearTimeout(debounceTimer);\n      debounceTimer = setTimeout(() => func.apply(context, args), delay);\n    };\n  };\n  const debouncedSetCopiedIndex = debounce(() => setCopyiedIntex(-1), 2000);\n\n  let writeToClipboard = function(value, index) {\n    Clipboard.setString(value);\n    setCopyiedIntex(index);\n    debouncedSetCopiedIndex();\n  };\n  return (\n    <View\n      style={{\n        flex: 1,\n        flexDirection: \"column\",\n        padding: 8,\n        backgroundColor: \"#fff\"\n      }}\n    >\n      <View style={[styles.backgroundColor]}></View>\n      {/* <Text {...props} style={[props.style, { fontFamily: 'space-mono' }]} >{props.color}</Text> */}\n      <View style={{ marginTop: 20 }}>\n        {items.map((item, index) => (\n          <Touchable\n            key={item.key}\n            onPress={() => writeToClipboard(item.value, index)}\n          >\n            <View style={styles.info}>\n              <Text style={styles.colorNameText}>{item.key} : </Text>\n\n              <Text>{item.value}</Text>\n              {index === copyiedIndex && (\n                <Text style={{ position: \"absolute\", top: -11, right: 0 }}>\n                  Copied!\n                </Text>\n              )}\n              <FontAwesomeIcon icon={faCopy} />\n            </View>\n          </Touchable>\n        ))}\n      </View>\n    </View>\n  );\n}\n","import * as React from \"react\";\nimport { StyleSheet, Text } from \"react-native\";\nimport Touchable from \"react-native-platform-touchable\";\n\nexport default class CromaButton extends React.Component {\n  render() {\n    const { style, onPress, children } = this.props;\n    return (\n      <Touchable style={[styles.button, style]} onPress={onPress}>\n        <Text style={{ textTransform: \"uppercase\" }}> {children} </Text>\n      </Touchable>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    shadowColor: \"rgba(0,0,0, .4)\",\n    shadowOffset: { height: 1, width: 1 },\n    shadowOpacity: 1,\n    shadowRadius: 1,\n    backgroundColor: \"#fff\",\n    elevation: 2,\n    height: 50,\n    marginTop: 10,\n    marginBottom: 10,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }\n});\n","import React from \"react\";\nimport { ScrollView, StyleSheet, Button } from \"react-native\";\nimport { ColorDetail } from \"../components/ColorDetails\";\nimport CromaButton from \"../components/CromaButton\";\n\nexport default function ColorDetailScreen(props) {\n  const color = props.navigation.getParam(\"color\");\n  return (\n    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>\n      <ColorDetail navigation={props.navigation} color={color}>\n        {color}\n      </ColorDetail>\n      <CromaButton\n        onPress={() => props.navigation.navigate(\"Palettes\", { color: color })}\n      >\n        See color palettes\n      </CromaButton>\n    </ScrollView>\n  );\n}\n\nColorDetailScreen.navigationOptions = ({ navigation }) => {\n  return {\n    title: navigation.getParam(\"color\")\n  };\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingLeft: 12,\n    paddingRight: 12\n  }\n});\n","import React, { useState } from \"react\";\nimport { ScrollView, View, StyleSheet } from \"react-native\";\nimport CromaButton from \"../components/CromaButton\";\nimport { CromaColorPicker as ColorPicker } from \"croma-color-picker\";\nexport default function ColorPickerScreen(props) {\n  const [color, setColor] = useState(\"#db0a5b\");\n  return (\n    <ScrollView showsVerticalScrollIndicator={false}>\n      <View style={styles.container}>\n        <ColorPicker\n          onChangeColor={color => {\n            setColor(color);\n          }}\n          style={[{ height: 300, flex: 1 }]}\n        />\n        <CromaButton\n          onPress={() => {\n            props.navigation.goBack();\n            props.navigation.getParam(\"onDone\")({ color: color });\n          }}\n        >\n          Done\n        </CromaButton>\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: \"column\",\n    margin: 8\n  }\n});\n","import * as React from \"react\";\nimport { StyleSheet, View, Text } from \"react-native\";\nimport Card from \"./Card\";\nimport Colors from \"../constants/Colors\";\nimport MultiColorView from \"./MultiColorView\";\n\nexport class PalettePreviewCard extends React.Component {\n  render() {\n    return (\n      <Card {...this.props}>\n        <View>\n          <MultiColorView {...this.props}></MultiColorView>\n          <View style={styles.bottom}>\n            <Text style={styles.label}>{this.props.name}</Text>\n          </View>\n        </View>\n      </Card>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  bottom: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    height: 48\n  },\n  label: {\n    flex: 1,\n    fontWeight: \"500\",\n    marginHorizontal: 16,\n    color: Colors.darkGrey\n  }\n});\n","import React from \"react\";\nimport { ScrollView, StyleSheet, Text } from \"react-native\";\nimport Color from \"pigment/full\";\nimport { PalettePreviewCard } from \"../components/PalettePreviewCard\";\nexport default function PalettesScreen(props) {\n  // Convert camelCase to sentence\n  const parseCamelCase = text => {\n    if (typeof text !== \"string\") {\n      return \"\";\n    }\n    return text\n      .replace(/([a-z])([A-Z])/g, \"$1 $2\")\n      .replace(/\\b([A-Z]+)([A-Z])([a-z])/, \"$1 $2$3\")\n      .replace(/^./, str => str.toUpperCase());\n  };\n  const color = new Color(props.navigation.getParam(\"color\"));\n  let items = [];\n  for (const i in color) {\n    if (/.*scheme$/i.test(i) && typeof color[i] === \"function\") {\n      let colors = [];\n      const paletteColors = color[i]();\n      paletteColors.forEach(c => colors.push({ color: c.tohex() }));\n      items.push(\n        <PalettePreviewCard\n          onPress={() =>\n            props.navigation.navigate(\"ColorList\", { colors: colors })\n          }\n          key={i.toString()}\n          colors={colors}\n          name={parseCamelCase(i.toString())}\n        ></PalettePreviewCard>\n      );\n    }\n  }\n  return (\n    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>\n      {items}\n    </ScrollView>\n  );\n}\n\nPalettesScreen.navigationOptions = ({ navigation }) => {\n  return {\n    title: navigation.getParam(\"color\")\n  };\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingLeft: 12,\n    paddingRight: 12\n  }\n});\n","import React from \"react\";\nimport { Text, View, StyleSheet, TextInput } from \"react-native\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport Colors from \"../constants/Colors\";\nimport CromaButton from \"../components/CromaButton\";\nimport { Croma } from \"../store/store\";\nimport { TextDialog } from \"./CommanDialogs\";\n\nexport const SavePalette = props => {\n  const [paletteName, setPaletteName] = React.useState(\"\");\n  const [isPaletteNameExist, setIsPaletteNameExist] = React.useState(false);\n  const { addPalette, allPalettes } = React.useContext(Croma);\n  const { title, navigationPath } = props;\n  return (\n    <ScrollView showsVerticalScrollIndicator={false}>\n      <View style={styles.card}>\n        <Text style={styles.label}>{title}</Text>\n        <TextInput\n          style={styles.input}\n          placeholder=\"Enter a name for the palette\"\n          onChangeText={name => setPaletteName(name)}\n        />\n      </View>\n      <CromaButton\n        onPress={async () => {\n          if (allPalettes[paletteName]) {\n            setIsPaletteNameExist(true);\n            setTimeout(() => {\n              setIsPaletteNameExist(false);\n            }, 3000);\n            return null;\n          }\n          const colors = [\n            ...new Set(props.navigation.getParam(\"colors\") || [])\n          ];\n          const palette = { name: paletteName, colors: colors };\n          addPalette(palette);\n          if (navigationPath === \"Palette\") {\n            props.navigation.navigate(navigationPath, palette);\n          } else {\n            props.navigation.navigate(navigationPath);\n          }\n        }}\n      >\n        Save palette\n      </CromaButton>\n      {isPaletteNameExist && <TextDialog />}\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  card: {\n    flex: 1,\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    shadowColor: \"rgba(0,0,0, .4)\",\n    shadowOffset: { height: 1, width: 1 },\n    shadowOpacity: 1,\n    shadowRadius: 1,\n    backgroundColor: \"#fff\",\n    elevation: 2,\n    height: 92,\n    marginVertical: 10,\n    padding: 10\n  },\n  label: {\n    flex: 1,\n    color: Colors.darkGrey,\n    fontWeight: \"700\"\n  },\n  input: {\n    flex: 1,\n    borderBottomColor: \"black\",\n    borderBottomWidth: 1\n  }\n});\n","import * as React from \"react\";\nimport { View, StyleSheet, Text } from \"react-native\";\n\nexport class SingleColorView extends React.Component {\n  render() {\n    return (\n      <View style={[styles.container, { backgroundColor: this.props.color }]}>\n        <Text style={styles.colorText}>{this.props.color}</Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 56,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  colorText: {\n    fontWeight: \"700\",\n    backgroundColor: \"rgba(255, 255, 255, .3)\",\n    paddingLeft: 8,\n    paddingRight: 8\n  }\n});\n","import React from \"react\";\nimport { SingleColorView } from \"../components/SingleColorView\";\nimport { ScrollView, StyleSheet } from \"react-native\";\nimport CromaButton from \"../components/CromaButton\";\n\nexport default function ColorListScreen(props) {\n  const colors = uniqueColors(props.navigation.getParam(\"colors\"));\n  return (\n    <ScrollView style={styles.listview} showsVerticalScrollIndicator={false}>\n      {colors.map(color => (\n        <SingleColorView key={color.color} color={color.color} />\n      ))}\n      <CromaButton\n        onPress={() =>\n          props.navigation.navigate(\"SavePalette\", { colors: colors })\n        }\n      >\n        SAVE AS NEW PALETTE\n      </CromaButton>\n    </ScrollView>\n  );\n}\nfunction uniqueColors(colors) {\n  let set = new Set();\n  let uniqueColors = [];\n  colors.forEach(color => {\n    if (!set.has(color.color)) {\n      uniqueColors.push(color);\n    }\n    set.add(color.color);\n  });\n  return uniqueColors;\n}\n\nColorListScreen.navigationOptions = {\n  title: \"Colors\"\n};\n\nconst styles = StyleSheet.create({\n  listview: {\n    margin: 8\n  }\n});\n","import * as React from \"react\";\nimport { StyleSheet, View, Text } from \"react-native\";\nimport Card from \"./Card\";\nimport Colors from \"../constants/Colors\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-native-fontawesome\";\nimport { faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport Touchable from \"react-native-platform-touchable\";\n\nexport default class SingleColorCard extends React.Component {\n  render() {\n    return (\n      <Card {...this.props}>\n        <View>\n          <View\n            style={{ backgroundColor: this.props.color, height: 100 }}\n          ></View>\n          <View style={styles.bottom}>\n            <Text style={styles.label}>{this.props.color}</Text>\n            <View style={styles.actionButtonsView}>\n              <Touchable\n                onPress={event => {\n                  event.preventDefault();\n                  event.stopPropagation();\n                  this.props.colorDeleteFromPalette();\n                }}\n                style={styles.actionButton}\n              >\n                <FontAwesomeIcon icon={faTrashAlt} />\n              </Touchable>\n            </View>\n          </View>\n        </View>\n      </Card>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  bottom: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    padding: 16,\n    height: 54\n  },\n  actionButtonsView: {\n    flexDirection: \"row\",\n    alignItems: \"flex-end\"\n  },\n  actionButton: {\n    paddingRight: 16\n  },\n  label: {\n    flex: 1,\n    marginHorizontal: 16,\n    fontWeight: \"500\",\n    color: Colors.darkGrey\n  }\n});\n","import React, { useState } from \"react\";\n\nimport SingleColorCard from \"../components/SingleColorCard\";\nimport {\n  ScrollView,\n  StyleSheet,\n  View,\n  Dimensions,\n  Platform\n} from \"react-native\";\nimport { UndoDialog, DialogContainer } from \"../components/CommanDialogs\";\nimport { Croma } from \"../store/store\";\nimport ActionButton from \"react-native-action-button\";\nimport Colors from \"../constants/Colors\";\nimport { Header } from \"react-navigation\";\nimport EmptyView from \"../components/EmptyView\";\nexport default function PaletteScreen(props) {\n  const { height, width } = Dimensions.get(\"window\");\n  const paletteName = props.navigation.getParam(\"name\");\n  const {\n    allPalettes,\n    colorDeleteFromPalette,\n    undoColorDeletion,\n    addColorToPalette\n  } = React.useContext(Croma);\n  const colors = allPalettes[paletteName].colors;\n  const deletedColors = allPalettes[paletteName].deletedColors\n    ? allPalettes[paletteName].deletedColors\n    : [];\n\n  const deleteColor = index => {\n    colorDeleteFromPalette(props.navigation.getParam(\"name\"), index);\n  };\n\n  return (\n    <>\n      <View\n        style={(styles.container, { minHeight: height - Header.HEIGHT - 16 })}\n      >\n        <ScrollView\n          style={styles.listview}\n          showsVerticalScrollIndicator={false}\n        >\n          {colors.map((colorObj, index) => {\n            return (\n              <SingleColorCard\n                key={colorObj.color}\n                onPress={() =>\n                  props.navigation.navigate(\"ColorDetails\", {\n                    color: colorObj.color\n                  })\n                }\n                color={colorObj.color}\n                colorDeleteFromPalette={() => {\n                  deleteColor(index);\n                }}\n              ></SingleColorCard>\n            );\n          })}\n          <EmptyView />\n        </ScrollView>\n        <ActionButton\n          bgColor=\"rgba(68, 68, 68, 0.6)\"\n          hideShadow={Platform.OS === \"web\" ? \"true\" : \"false\"}\n          buttonColor={Colors.accent}\n          onPress={() => {\n            props.navigation.navigate(\"ColorPicker\", {\n              onDone: color => {\n                addColorToPalette(paletteName, color);\n              }\n            });\n          }}\n        />\n      </View>\n      <DialogContainer>\n        {deletedColors.map(colorObj => (\n          <UndoDialog\n            name={colorObj.color}\n            undoDeletionByName={colorName => {\n              undoColorDeletion(paletteName, colorName);\n            }}\n          />\n        ))}\n      </DialogContainer>\n    </>\n  );\n}\nPaletteScreen.navigationOptions = ({ navigation }) => {\n  return {\n    title: navigation.getParam(\"name\")\n  };\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  listview: {\n    margin: 8\n  }\n});\n","import React from \"react\";\nimport { Platform } from \"react-native\";\nimport { createStackNavigator } from \"react-navigation\";\nimport { createAppContainer } from \"react-navigation\";\nimport ColorDetailsScreen from \"../screens/ColorDetailScreen\";\nimport ColorPickerScreen from \"../screens/ColorPickerScreen\";\nimport PalettesScreen from \"../screens/PalettesScreen\";\nimport SavePaletteScreen from \"../screens/SavePaletteScreen\";\nimport AddPaletteManuallyScreen from \"../screens/AddPaletteManuallyScreen\";\nimport ColorListScreen from \"../screens/ColorListScreen\";\nimport PaletteScreen from \"../screens/PaletteScreen\";\nimport HomeScreen from \"../screens/HomeScreen\";\nimport Colors from \"../constants/Colors\";\n\nconst config = Platform.select({\n  web: { headerMode: \"screen\" },\n  default: {}\n});\nconst RootStack = createStackNavigator(\n  {\n    ColorDetails: ColorDetailsScreen,\n    ColorPicker: ColorPickerScreen,\n    Palettes: PalettesScreen,\n    SavePalette: SavePaletteScreen,\n    ColorList: ColorListScreen,\n    Palette: PaletteScreen,\n    Home: HomeScreen,\n    AddPaletteManually: AddPaletteManuallyScreen\n  },\n  {\n    initialRouteName: \"Home\",\n    transparentCard: true,\n    /* The header config from HomeScreen is now here */\n    defaultNavigationOptions: {\n      headerStyle: {\n        backgroundColor: Colors.primary\n      },\n      headerTintColor: \"#fff\"\n    }\n  }\n);\n\nconst AppContainer = createAppContainer(RootStack);\n\nexport default RootStack;\n","import React from \"react\";\nimport { ScrollView } from \"react-native\";\nimport { SavePalette } from \"../components/SavePalette\";\n\nexport default function SavePaletteScreen(props) {\n  return (\n    <ScrollView showsVerticalScrollIndicator={false}>\n      <SavePalette\n        title={\"ADD NEW PALETTE\"}\n        navigationPath={\"Home\"}\n        navigation={props.navigation}\n      />\n    </ScrollView>\n  );\n}\n","import React from \"react\";\nimport { ScrollView } from \"react-native\";\nimport { SavePalette } from \"../components/SavePalette\";\n\nexport default function AddPaletteManuallyScreen(props) {\n  return (\n    <ScrollView showsVerticalScrollIndicator={false}>\n      <SavePalette\n        title={\"ADD PALETTE NAME\"}\n        navigationPath={\"Palette\"}\n        navigation={props.navigation}\n      />\n    </ScrollView>\n  );\n}\n","import { createBrowserApp } from \"@react-navigation/web\";\nimport { createSwitchNavigator } from \"react-navigation\";\n\nimport MainTabNavigator from \"./MainTabNavigator\";\n\nconst switchNavigator = createSwitchNavigator({\n  // You could add another route here for authentication.\n  // Read more at https://reactnavigation.org/docs/en/auth-flow.html\n  Main: MainTabNavigator\n});\nswitchNavigator.path = \"\";\n\nexport default createBrowserApp(switchNavigator, { history: \"hash\" });\n","import React from \"react\";\nimport { Platform, StatusBar, StyleSheet, View } from \"react-native\";\nimport Colors from \"./constants/Colors\";\nimport AppNavigator from \"./navigation/AppNavigator\";\n\nimport applicationHook, { initState, Croma } from \"./store/store\";\n\nexport default function App(props) {\n  return (\n    <Croma.Provider value={applicationHook(initState)}>\n      <View style={[styles.container]}>\n        <View\n          style={[{ flex: 1, backgroundColor: \"transparent\", maxWidth: 600 }]}\n        >\n          {Platform.OS === \"ios\" && <StatusBar barStyle=\"default\" />}\n          <AppNavigator />\n        </View>\n      </View>\n    </Croma.Provider>\n  );\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    backgroundColor: Colors.backgroundColor,\n    flexDirection: \"row\"\n  }\n});\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","const tintColor = \"#2f95dc\";\n\nexport default {\n  tintColor,\n  tabIconDefault: \"#ccc\",\n  tabIconSelected: tintColor,\n  tabBar: \"#fefefe\",\n  errorBackground: \"red\",\n  errorText: \"#fff\",\n  warningBackground: \"#EAEB5E\",\n  warningText: \"#666804\",\n  noticeBackground: tintColor,\n  noticeText: \"#fff\",\n  primary: \"#f1544d\",\n  primaryDark: \"#c94740\",\n  text: \"#fff\",\n  accent: \"#f0d04c\",\n  grey: \"#888\",\n  darkGrey: \"#333\",\n  lightGrey: \"#eee\",\n  white: \"#fff\",\n  black: \"#000\",\n  fadedBlack: \"rgba(0, 0, 0, .5)\",\n  backgroundColor: \"#f2f2f2\"\n};\n","import { AsyncStorage } from \"react-native\";\nconst ALL_PALETTES = \"ALL_PALETTES\";\nconst IS_USER_ALREADY_EXIST_KEY = \"IS_USER_ALREADY_EXIST\";\nexport default class Storage {\n  static getAllPalettes = async () => {\n    let palettes = await AsyncStorage.getItem(ALL_PALETTES);\n    if (palettes) {\n      return JSON.parse(palettes);\n    } else {\n      return {};\n    }\n  };\n\n  static saveAllPalette = async allPalette => {\n    await AsyncStorage.setItem(ALL_PALETTES, JSON.stringify(allPalette));\n  };\n\n  static setUserAlreadyExists = async () => {\n    await AsyncStorage.setItem(IS_USER_ALREADY_EXIST_KEY, \"true\");\n  };\n\n  static checkUserAlreadyExists = async () => {\n    return await AsyncStorage.getItem(IS_USER_ALREADY_EXIST_KEY);\n  };\n}\n","import React, { useState, useEffect } from \"react\";\nimport Storage from \"./../libs/Storage\";\nconst UNDO_TIMEOUT = 3000;\n\nexport const initState = {\n  allPalettes: {},\n  deletedPalettes: {},\n  isLoading: false\n};\n\nconst shrinkStateToStore = function(allPalettes) {\n  Storage.saveAllPalette(allPalettes);\n};\n\nconst sortPalette = palette =>\n  palette.colors.sort((a, b) => (a.color > b.color ? 1 : -1));\n\nexport default function applicationHook(initState) {\n  const addPalette = async palette => {\n    setState(state => {\n      const { allPalettes } = state;\n      sortPalette(palette);\n      allPalettes[palette.name] = palette;\n      return { ...state, allPalettes };\n    });\n  };\n\n  const loadInitPaletteFromStore = async () => {\n    //setting default palette when user comming first time\n    let defaultPalettes = {};\n    const isUserAleadyExits = await Storage.checkUserAlreadyExists();\n    if (isUserAleadyExits != \"true\") {\n      Storage.setUserAlreadyExists();\n      defaultPalettes = {\n        \"Croma example palette\": {\n          name: \"Croma example palette\",\n          colors: [{ color: \"#ef635f\" }, { color: \"#efd05f\" }]\n        }\n      };\n    }\n    const allPalettes = await Storage.getAllPalettes();\n\n    setState(state => ({\n      ...state,\n      allPalettes: { ...allPalettes, ...defaultPalettes }\n    }));\n  };\n\n  const removePaletteFromStateByName = name => {\n    setState(state => {\n      const { deletedPalettes } = state;\n      delete deletedPalettes[name];\n      return { ...state, deletedPalettes };\n    });\n  };\n\n  const addColorToPalette = (name, color) => {\n    setState(state => {\n      const { allPalettes } = state;\n      allPalettes[name].colors = allPalettes[name].colors.concat(color);\n      sortPalette(allPalettes[name]);\n      return { ...state, allPalettes };\n    });\n  };\n\n  const deletePaletteByName = async name => {\n    setState(state => {\n      const { allPalettes } = state;\n      const { deletedPalettes } = state;\n      if (allPalettes[name]) {\n        deletedPalettes[name] = { ...allPalettes[name] };\n        delete allPalettes[name];\n        setTimeout(() => {\n          removePaletteFromStateByName(name);\n        }, UNDO_TIMEOUT);\n        return { ...state, allPalettes, deletedPalettes };\n      }\n      return { ...state };\n    });\n  };\n\n  const undoDeletionByName = name => {\n    setState(state => {\n      const { deletedPalettes } = state;\n      if (deletedPalettes[name]) {\n        addPalette({ ...deletedPalettes[name] });\n        removePaletteFromStateByName(name);\n      }\n      return { ...state };\n    });\n  };\n\n  const colorDeleteFromPalette = (name, colorIndex) => {\n    setState(state => {\n      const { allPalettes } = state;\n      const deletedColor = allPalettes[name].colors.splice(colorIndex, 1);\n      if (allPalettes[name].deletedColors) {\n        allPalettes[name].deletedColors.push({ ...deletedColor[0] });\n      } else {\n        allPalettes[name].deletedColors = [...deletedColor];\n      }\n      setTimeout(() => {\n        clearDeletedColor(name, deletedColor[0].color);\n      }, UNDO_TIMEOUT);\n      return { ...state, allPalettes };\n    });\n  };\n\n  const undoColorDeletion = (name, colorName) => {\n    setState(state => {\n      const { allPalettes } = state;\n      allPalettes[name].colors.push({ color: colorName });\n      allPalettes[name].deletedColors.forEach((color, index) => {\n        if (color.color === colorName) {\n          allPalettes[name].deletedColors.splice(index, 1);\n        }\n      });\n      sortPalette(allPalettes[name]);\n      return { ...state, allPalettes };\n    });\n  };\n\n  const clearDeletedColor = (name, colorName) => {\n    setState(state => {\n      const { allPalettes } = state;\n      allPalettes[name].deletedColors.forEach((color, index) => {\n        if (color.color === colorName) {\n          allPalettes[name].deletedColors.splice(index, 1);\n        }\n      });\n      return { ...state, allPalettes };\n    });\n  };\n\n  const [state, setState] = useState({\n    ...initState,\n    loadInitPaletteFromStore,\n    undoDeletionByName,\n    deletePaletteByName,\n    addPalette,\n    colorDeleteFromPalette,\n    undoColorDeletion,\n    addColorToPalette\n  });\n  if (Object.keys(state.allPalettes).length > 0) {\n    shrinkStateToStore(state.allPalettes);\n  }\n  return state;\n}\n\nexport const Croma = React.createContext();\n","import React from \"react\";\nimport { View, Text, StyleSheet } from \"react-native\";\nimport Touchable from \"react-native-platform-touchable\";\n\nexport const DialogContainer = props => (\n  <View style={{ position: \"absolute\", bottom: 0, width: \"100%\" }}>\n    {props.children}\n  </View>\n);\n\nexport const UndoDialog = props => {\n  /*\n    Todo - need to add deletion based on type \n  */\n  const { name, undoDeletionByName } = props;\n  return (\n    <View style={styles.undoCard}>\n      <View style={{ width: \"80%\" }}>\n        <Text style={styles.undoText}>Deleted {name}. tab to dismiss.</Text>\n      </View>\n      <Touchable\n        onPress={event => {\n          event.stopPropagation();\n          event.preventDefault();\n          undoDeletionByName(name);\n        }}\n      >\n        <Text style={styles.undoButton}> UNDO </Text>\n      </Touchable>\n    </View>\n  );\n};\n\nexport const TextDialog = props => (\n  <View style={styles.undoCard}>\n    <View style={{ width: \"80%\" }}>\n      <Text style={styles.undoText}>\n        A palette with same name already exists.\n      </Text>\n    </View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  undoCard: {\n    backgroundColor: \"#303036\",\n    flexDirection: \"row\",\n    padding: 15,\n    marginTop: 1\n  },\n  undoText: {\n    color: \"#fff\"\n  },\n  undoButton: {\n    fontWeight: \"bold\",\n    color: \"#e6be0b\"\n  }\n});\n"],"sourceRoot":""}